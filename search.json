[
  {
    "objectID": "materials/rnaseq/walkthrough/index.html",
    "href": "materials/rnaseq/walkthrough/index.html",
    "title": "RNA-Seq Pipeline Tutorial",
    "section": "",
    "text": "Detailed steps on processing RNA Sequencing data\nHere we walk through the Kwon Lab RNA-Seq pipeline. The pipeline integrates steps from an nf-core rnaseq pipeline into an executable snakemake pipeline. The end product is a gene expression matrix and a QC report for further downstream analysis.\nEstimated time for completion ~1 hour",
    "crumbs": [
      "About the Kwon Lab",
      "RNAseq",
      "Walkthrough"
    ]
  },
  {
    "objectID": "materials/rnaseq/walkthrough/index.html#downloading-the-pipeline",
    "href": "materials/rnaseq/walkthrough/index.html#downloading-the-pipeline",
    "title": "RNA-Seq Pipeline Tutorial",
    "section": "Downloading the pipeline",
    "text": "Downloading the pipeline\nLaunch VSCode on an O2 compute node. More instructions can be found here.\nOpen a terminal within VSCode. Click terminal in the top bar and new terminal. You should be on a compute node and within your groups folder. You can check where you currently are in the file system with pwd.\n\nDownload the pipeline by running the following commands. This is where your pipeline will be located and you can go into the folder with cd. Running ls will show all pipeline files.\n\n# Downloading the pipeline\nwget https://github.com/kwondry/rnaseq_gene_expression/archive/refs/heads/main.zip\n\n# Unzip and rename the folder\nunzip main.zip -d my_rnaseq_run && rm main.zip\n\n# Navigate into your rnaseq pipeline folder\ncd my_rnaseq_run/rnaseq_gene_expression-main\n\n\nYou will now have a rnaseq_gene_expression-main folder that contains all the required files.",
    "crumbs": [
      "About the Kwon Lab",
      "RNAseq",
      "Walkthrough"
    ]
  },
  {
    "objectID": "materials/rnaseq/walkthrough/index.html#creating-a-sample-sheet",
    "href": "materials/rnaseq/walkthrough/index.html#creating-a-sample-sheet",
    "title": "RNA-Seq Pipeline Tutorial",
    "section": "Creating a sample sheet",
    "text": "Creating a sample sheet\nA sample sheet will define which samples you want to include in the run and provide file paths for each sample.\nDownload an example sample sheet here.\nEdit this sample sheet with explicit file paths for each sample that want included in the run. You can edit the raw csv in Excel or any editor you’d like and add your samples with explicit, absolute filepaths starting from /n/.\n\n\nsample_sheet.csv columns\n\n\n\n\n\n\n\n\n\nsample\nfastq_1\nfastq_2\nstrandedness\n\n\n\n\nSample IDs\nFile path for forward reads\nFile path for reverse reads. If your sequences are single end, you can leave this column empty\nSet as auto for each sample. However, for samples with high contaminants, it should be set as both.\n\n\n\n\n\nThe filepaths should be similar in structure to:\n/n/groups/kwon/data1/sequencing_run_archive_DO_NOT_EDIT/&lt;your sequencing run&gt;/&lt;filename_for_sample&gt;.\nAll files must be gzipped (have .gz extension.)\nAfter updating the example sample sheet, save it as a comma-delimited file or .csv.\n\n\n\n\nUploading your samplesheet\nNext, we need to upload the updated sample sheet into the pipeline folder. This can be done by dragging that the updated folder from its current location into the VSCode sidebar in the input folder. VSCode may prompt you asking to if you want to replace the current file and confirm.\n\nYou can click the sample_sheet.csv to confirm it has your updated samples.",
    "crumbs": [
      "About the Kwon Lab",
      "RNAseq",
      "Walkthrough"
    ]
  },
  {
    "objectID": "materials/rnaseq/walkthrough/index.html#running-the-pipeline",
    "href": "materials/rnaseq/walkthrough/index.html#running-the-pipeline",
    "title": "RNA-Seq Pipeline Tutorial",
    "section": "Running the pipeline",
    "text": "Running the pipeline\n\nTesting the pipeline\nTo ensure everything is set up properly, we can run the pipeline on a test dataset.\nNavigate back to the VSCode terminal and check that you are in your pipeline folder. To run the test data, activate the snakemake environment and run snakemake with the following.\n\n# Activates the mamba environment \nmamba activate snakemake \n\n# Runs the test data through the pipeline\nsnakemake --use-conda test\n\nThis will run the test data interactivately and you will be able to watch the pipeline run each step. This may up to 40 minutes, so now is a good time for a tea break.\n\nAfter the pipeline finishes, you should see a folder generated in your pipeline folder called test_results. If you see a multiqc/star_salmon/nfcore_rnaseq_test_multiqc_report.html file inside the two sub folders, the pipeline has successfully finished.\n\n\n\n\n\nRunning the pipeline\nAlmost there! All that’s left is running your samples through the pipeline.\nOnce you have the updated sample sheet with your samples in the input folder inside the pipeline directory, navigate back again to the VSCode terminal. Submit the pipeline with the following.\n\n# Activates the mamba environment \nmamba activate snakemake \n\n# Submits a job with slurm\nsbatch submit_jobs.sh\n\n\nThis will submit the snakemake pipeline as a job, so you do not need to keep everything open. Depending on the number of samples and reads, the pipeline may take a few hours to days to finish.",
    "crumbs": [
      "About the Kwon Lab",
      "RNAseq",
      "Walkthrough"
    ]
  },
  {
    "objectID": "materials/rnaseq/walkthrough/index.html#saving-outputs",
    "href": "materials/rnaseq/walkthrough/index.html#saving-outputs",
    "title": "RNA-Seq Pipeline Tutorial",
    "section": "Saving outputs",
    "text": "Saving outputs",
    "crumbs": [
      "About the Kwon Lab",
      "RNAseq",
      "Walkthrough"
    ]
  },
  {
    "objectID": "materials/getting-started/o2/index.html",
    "href": "materials/getting-started/o2/index.html",
    "title": "O2",
    "section": "",
    "text": "Working with the HMS O2 cluster",
    "crumbs": [
      "About the Kwon Lab",
      "Getting Started",
      "</b> O2"
    ]
  },
  {
    "objectID": "materials/getting-started/o2/index.html#introduction-to-o2",
    "href": "materials/getting-started/o2/index.html#introduction-to-o2",
    "title": "O2",
    "section": "Introduction to O2",
    "text": "Introduction to O2\nO2 is the high performance computing (HPC) cluster maintained by Harvard Medical School. O2 official documentation is located here:\n\nO2 Cluster Documentation\n\nO2 Status (Maintenance Updates and Outages)",
    "crumbs": [
      "About the Kwon Lab",
      "Getting Started",
      "</b> O2"
    ]
  },
  {
    "objectID": "materials/getting-started/o2/index.html#setting-up-your-o2-account",
    "href": "materials/getting-started/o2/index.html#setting-up-your-o2-account",
    "title": "O2",
    "section": "Setting up your O2 account",
    "text": "Setting up your O2 account\n\nObtain your O2 account\nKwon Lab is an “off-quad” Harvard Medical School affiliated lab that uses O2 computing services. This section was created using the official O2 documentation as reference.\n\n\nSubmit PPMS form and wait for RC Core admin (rccore@hms.harvard.edu) for approval. Approval notifications are sent to email submitted in PPMS form.\nSign the HMS RC Core user agreement that is sent via email (requires PI to co-sign)\n\n\n\nAccessing O2\nUsing your computer’s terminal, use the following command to access O2 and enter your credentials accordingly.\n\nssh &lt;hms_id&gt;@o2.hms.harvard.edu\n\n\n\n\nSetting up 2-Factor Authentication with Duo\nO2 login requires 2-Factor Authentication and it is recommended to execute this through the Duo app, which can be installed on your phone.\n\nDownload the app on phone\nEmail itservicedesk@hms.harvard.edu or call 617-432-2000 to ask HMS IT to register and connect your HMS account with Duo.\nLogging into O2 by default asks you to pick a Duo authentication method (push, call or text). Set your Duo app to either send a push or call your phone each time automatically. DO NOT set text as your default.\n\n(On the login node) Run the following on O2 terminal:\nFor push: (recommended, but only if you already have Duo push!)\n\necho 'export DUO_PASSCODE=push' &gt;&gt; $HOME/.bashrc\n\nFor phone call:\n\necho 'export DUO_PASSCODE=phone' &gt;&gt; $HOME/.bashrc\n\n\n\nSetup passwordless login (SSH keys)\nPlease refer to SSH keys tutorial here",
    "crumbs": [
      "About the Kwon Lab",
      "Getting Started",
      "</b> O2"
    ]
  },
  {
    "objectID": "materials/getting-started/o2/index.html#getting-oriented-with-o2",
    "href": "materials/getting-started/o2/index.html#getting-oriented-with-o2",
    "title": "O2",
    "section": "Getting oriented with O2",
    "text": "Getting oriented with O2\nSave all your files into one of the two locations:\n\n/n/groups/kwon/&lt;your_name&gt; Your own folder within the Kwon Lab group folder and main storage location.\n\n/n/groups/scratch/&lt;first_letter_of_hms_id&gt;/&lt;hms_id&gt; Scratch directory is for temporary storage and files are deleted in 45 days.\n\n\nRequest access to the /n/groups/kwon/ groups folder\nTo request access, email rchelp@hms.harvard.edu to ask for access to the group folder /n/groups/kwon on O2. Please copy dkwon@mgh.harvard.edu and jelsherbini@mgh.harvard.edu.\nUse the following command in the O2 terminal to access the Kwon Lab folder and make a folder under your own name:\n\ncd /n/groups/kwon/\nmkdir &lt;your name&gt;\n\nTo access your own folder within the Kwon Lab group folder on the O2 terminal:\n\ncd /n/groups/kwon/&lt;your name&gt;\n\n\n\nMaking a scratch directory\nNote: the scratch directory is for TEMPORARY STORAGE. All files in scratch are automatically deleted 45 days after their last modification date. Everything you want to keep needs to be moved to your folder in /n/groups/kwon/&lt;your name&gt;.\n(On the login node) Run the following on O2 terminal:\n\n/n/cluster/bin/scratch_create_directory.sh\n\nTo access scratch directory:\n\ncd /n/groups/scratch/users/&lt;first_letter_of_hms_id&gt;/&lt;hms_id&gt;",
    "crumbs": [
      "About the Kwon Lab",
      "Getting Started",
      "</b> O2"
    ]
  },
  {
    "objectID": "materials/16S/valencia/index.html",
    "href": "materials/16S/valencia/index.html",
    "title": "Generating CSTs with Valencia",
    "section": "",
    "text": "The goal of this tutorial is to show the current best-practice way to assign CSTs to your human cervicovaginal 16S data. This tutorial assumes you have a phyloseq object that contains the ASVs for your samples.\nValencia compares your 16S data to a set of curated centroid communities and determines which one each of your samples is closest to.",
    "crumbs": [
      "About the Kwon Lab",
      "16S",
      "Assigning CSTs with Valencia"
    ]
  },
  {
    "objectID": "materials/16S/valencia/index.html#introduction",
    "href": "materials/16S/valencia/index.html#introduction",
    "title": "Generating CSTs with Valencia",
    "section": "",
    "text": "The goal of this tutorial is to show the current best-practice way to assign CSTs to your human cervicovaginal 16S data. This tutorial assumes you have a phyloseq object that contains the ASVs for your samples.\nValencia compares your 16S data to a set of curated centroid communities and determines which one each of your samples is closest to.",
    "crumbs": [
      "About the Kwon Lab",
      "16S",
      "Assigning CSTs with Valencia"
    ]
  },
  {
    "objectID": "materials/16S/valencia/index.html#installation",
    "href": "materials/16S/valencia/index.html#installation",
    "title": "Generating CSTs with Valencia",
    "section": "Installation",
    "text": "Installation\n\nInstall R, RStudio\nFollow the instructions on the Durban workshop series website.\n\n\nInstall R dependencies\nAfter you’ve installed the packages on there, you can also install phyloseq and microViz:\n\ninstall.packages(c(\"tidyverse\", \"cowplot\", \"gtsummary\", \"ggdendro\", \"ggdist\", \"ggforce\",\"ggplot2movies\", \"ggrepel\", \"ggridges\", \"ggthemes\", \"colorspace\", \"patchwork\", \"quarto\"))\n\n\nif (!requireNamespace(\"BiocManager\", quietly = TRUE)) install.packages(\"BiocManager\")\nBiocManager::install(c(\"phyloseq\", \"microbiome\", \"ComplexHeatmap\"), update = FALSE)\n\ninstall.packages(\n  \"microViz\",\n  repos = c(davidbarnett = \"https://david-barnett.r-universe.dev\", getOption(\"repos\"))\n)\n\n\n\nInstall conda for package management\nCheck if you have conda installed:\n\nOpen a terminal\nType which conda\nIf it says conda not found or nothing shows up, run the following:\n\n\ncd ~;\ncurl -L -O \"https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-$(uname)-$(uname -m).sh\";\nbash Mambaforge-$(uname)-$(uname -m).sh;\n\n\nWhen prompted agree to the lisence with yes and ask it to add itself to your shell startup with yes.\nClose and reopen your terminal.\n\nIf you conda is already installed, run the following to ensure you have the most recent version:\n\nconda update conda && conda install mamba -n base -c conda-forge\n\n\n\nInstall SpeciateIT and Valencia\nMake a new conda environment for these pieces of software:\n\nmamba create -n speciateit_valencia -c conda-forge python pandas\n\nThen, follow the instructions on https://github.com/ravel-lab/speciateIT/ to install. Make note of the location where you put the speciateIT folder.\nTo install Valencia, download the script by going here , then right click, Save As, and save where you want. This version of the script is from Michael France as of June 2024 and as of that time was the correct way to run Valencia.",
    "crumbs": [
      "About the Kwon Lab",
      "16S",
      "Assigning CSTs with Valencia"
    ]
  },
  {
    "objectID": "materials/16S/valencia/index.html#running-the-steps",
    "href": "materials/16S/valencia/index.html#running-the-steps",
    "title": "Generating CSTs with Valencia",
    "section": "Running the steps",
    "text": "Running the steps\nPhew, we’ve installed everything. Now we can run the next steps.",
    "crumbs": [
      "About the Kwon Lab",
      "16S",
      "Assigning CSTs with Valencia"
    ]
  },
  {
    "objectID": "materials/16S/valencia/index.html#get-your-asvs-and-count-table-from-your-phyloseq-object",
    "href": "materials/16S/valencia/index.html#get-your-asvs-and-count-table-from-your-phyloseq-object",
    "title": "Generating CSTs with Valencia",
    "section": "Get your ASVs and count table from your phyloseq object",
    "text": "Get your ASVs and count table from your phyloseq object\n\nFirst, make a new RStudio project in a new folder. (instructions here if you need them)\nDownload the example phyloseq and put it in the new project folder you just created. Download from here\nOpen up a new quarto document, and make a code chunk for the following code.\nThe following code reads in your phyloseq object, and writes out two files:\n\na fasta file containing your ASVs\na count table with samples as rows and ASVs as columns.\n\n\nBoth these files are required for CST assignment.\n\nlibrary(tidyverse)\nlibrary(phyloseq)\nlibrary(microViz)\n\nps &lt;- readRDS(\"example_phyloseq.RDS\") \n\nasvs_to_write &lt;- tibble(asv=microViz::otu_get(ps) %&gt;% colnames()) %&gt;% mutate(fasta_id=str_c(\"&gt;\",asv, \"\\n\")) %&gt;% mutate(asv = str_c(asv, \"\\n\"))\n\nasvs_to_write %&gt;%\n  mutate(line_to_write=map2_chr(fasta_id, asv, str_c)) %&gt;%\n  pull(line_to_write) %&gt;%\n  reduce(str_c) %&gt;%\n  write_file(\"asvs.fa\")\n\nps %&gt;%\n  otu_get() %&gt;%\n  as.data.frame() %&gt;%\n  write.csv(\"count_table.csv\") # using base R write.csv since we need the rownames\n\n\nRun SpeciateIT and Valencia\nFirst, run SpeciateIT’s classify program, which takes the asv fasta file as input. Replace the path to the database with the correct path for your computer. Make sure the database is using the correct region corresponding to your 16S amplicon (for the typical Kwon lab workflow use the “V4V4” databse, although newer data will start to be “V3V4”)\n\nconda activate speciateit_valencia\n\nclassify -d ~/dev/speciateIT-master/vSpeciateDB_models/vSpeciateIT_V4V4 \\\n  -i asvs.fa \\\n  -o speciateit_output\n\nThen, take the output from classify and your count table and use it to prepare the input for Valencia. Make sure to replace the path to count_table.py so it is correct for your system:\n\npython ~/dev/speciateIT-master/bin/count_table.py \\\n  -c count_table.csv \\\n  -s speciateit_output/MC_order7_results.txt\n\nNow run Valencia. The CST centroids file should be from the SpeciateIT github repository download here for convenience, and the Valencia python script should be downloaded from here (which you may have already done in the installation section above).\n\npython Valencia_v1.1.py \\\n  -ref VALENCIA2_CST_centroids_20Mar2024.csv \\\n  -i count_table_speciateIT.csv \\\n  -o cst_assignments\n\n\n\nAdd CSTs back to phyloseq object\nNow we have CST assignments for each sample. We need to add it back to the phyloseq object so we can use them in R.\nWe’ll use ps_join() from the microViz package to add the CSTs back to the phyloseq object\n\ncst_assignments &lt;- read_csv(\"cst_assignments.csv\")\n\nps_with_csts &lt;- ps_join(ps, match_sample_names = \"sampleID\",\n  cst_assignments %&gt;% select(sampleID, CST, subCST, score))\n\nps_with_csts %&gt;%\n tax_transform(rank = \"unique\", trans = \"compositional\") %&gt;%\n dist_calc(dist = \"bray\") %&gt;%\n ord_calc(\n  method = \"auto\"\n ) %&gt;% \n ord_plot(\n  axes = c(1, 2),\n  colour = \"subCST\", fill = \"subCST\",\n  shape = \"circle\", alpha = \"score\",\n  size = 2\n )\n\nTo save your phyloseq object with the added CSTs, run the following:\n\nps_with_csts %&gt;% saveRDS(\"phyloseq_object_with_csts.RDS\")\n\nThis code will be useful for exploring the phyloseq object interactively.\n\nps_with_csts %&gt;% ord_explore()",
    "crumbs": [
      "About the Kwon Lab",
      "16S",
      "Assigning CSTs with Valencia"
    ]
  },
  {
    "objectID": "materials/16S/dada2/index.html",
    "href": "materials/16S/dada2/index.html",
    "title": "Prequisites for running the nf-core RNA-Seq pipeline",
    "section": "",
    "text": "Ensure you have mamba, snakemake, and nf-core installed on your platform.\n\nDownload the repo to your scratch folder\nReplace the filepath with your scratch folder\ncd /n/scratch3/users/j/je112\nwget https://github.com/kwonlabpipelines/smartseq_kraken/archive/refs/heads/main.zip\n\n\nUnzip and rename the folder\nunzip main.zip -d my_new_rnaseq_run\n\n\nAdding your samples\nOpen my_new_rnaseq_run/input/sample_sheet.csv with an editor and add your samples with the corresponding filepaths.\nColumns are named sample,fastq_1,fastq_2,strandedness You can download the raw csv file from the github repo, edit in excel or google drive, then save as csv.\nTo get it on o2, you can use rsync (https://harvardmed.atlassian.net/wiki/spaces/O2/pages/1588662157/File+Transfer)\nrsync -avt path_to_file hms_username@transfer.rc.hms.harvard.edu:/home/hms_username"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Kwon Lab Pipelines",
    "section": "",
    "text": "Kwon Lab Pipelines\nby Kwondry\n\n\nDocumentation and tutorials for reproducible research in the Kwon Lab"
  },
  {
    "objectID": "materials/16S/prereqs/index.html",
    "href": "materials/16S/prereqs/index.html",
    "title": "Prequisites for running the nf-core RNA-Seq pipeline",
    "section": "",
    "text": "Ensure you have mamba, snakemake, and nf-core installed on your platform.\n\nDownload the repo to your scratch folder\nReplace the filepath with your scratch folder\ncd /n/scratch3/users/j/je112\nwget https://github.com/kwonlabpipelines/smartseq_kraken/archive/refs/heads/main.zip\n\n\nUnzip and rename the folder\nunzip main.zip -d my_new_rnaseq_run\n\n\nAdding your samples\nOpen my_new_rnaseq_run/input/sample_sheet.csv with an editor and add your samples with the corresponding filepaths.\nColumns are named sample,fastq_1,fastq_2,strandedness You can download the raw csv file from the github repo, edit in excel or google drive, then save as csv.\nTo get it on o2, you can use rsync (https://harvardmed.atlassian.net/wiki/spaces/O2/pages/1588662157/File+Transfer)\nrsync -avt path_to_file hms_username@transfer.rc.hms.harvard.edu:/home/hms_username"
  },
  {
    "objectID": "materials/getting-started/installation/index.html",
    "href": "materials/getting-started/installation/index.html",
    "title": "Installation instructions",
    "section": "",
    "text": "Instructions for installing various package managers and pipelines",
    "crumbs": [
      "About the Kwon Lab",
      "Getting Started",
      "</b> Installation"
    ]
  },
  {
    "objectID": "materials/getting-started/installation/index.html#compute-node",
    "href": "materials/getting-started/installation/index.html#compute-node",
    "title": "Installation instructions",
    "section": "Compute node",
    "text": "Compute node\nBy default upon logging into O2, each user is placed on a login node. Login nodes are NOT suitable for supporting intensive computational processes. Intensive analyses on the login mode will be automatically terminated by O2 and users may be flagged by the admin if this occurs consistently. Please be sure to request a compute node to execute any tasks. For additional details about compute nodes, please reference the O2 documentation.\n\nThis command requests a compute node for 12 hours, with 8GB of memory and 1 core. Compute nodes automatically terminate when you disconnect from the O2 cluster or when the time limit is met, whichever occurs first.\n\nsrun --pty -p priority -t 12:0:0 --mem=8G -c 1 bash",
    "crumbs": [
      "About the Kwon Lab",
      "Getting Started",
      "</b> Installation"
    ]
  },
  {
    "objectID": "materials/getting-started/installation/index.html#mambaminimamba",
    "href": "materials/getting-started/installation/index.html#mambaminimamba",
    "title": "Installation instructions",
    "section": "mamba/minimamba",
    "text": "mamba/minimamba\nExecuting bioinformatics analyses often involve installing multiple packages/tools. Mamba is a package manager that allows users to create environments. Environments separate these package installations into individual “partitions”, which helps 1) prevent users from disrupting their own base environment with the installations of these new packages, 2) facilitate easy access and removal of packages and 3) manage/create environments individually for each pipeline or type of analysis.\nInstall mamba on O2 terminal:\n\ncd ~;\ncurl -L -O \"https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-$(uname)-$(uname -m).sh\";\nbash Mambaforge-$(uname)-$(uname -m).sh;\n\nInitialize mamba on O2 terminal before usage (first time only):\n\nmamba init\n# close terminal and reopen\nsource ~/.bashrc",
    "crumbs": [
      "About the Kwon Lab",
      "Getting Started",
      "</b> Installation"
    ]
  },
  {
    "objectID": "materials/getting-started/installation/index.html#snakemake",
    "href": "materials/getting-started/installation/index.html#snakemake",
    "title": "Installation instructions",
    "section": "Snakemake",
    "text": "Snakemake\nSnakemake is a package that helps structure and streamline code writing for bioinformatics pipelines, which is particularly useful for complicated pipelines that involve multiple steps and a huge number of files. Create your first conda environment named snakemake_8_20_3 with the snakemake package installed with the following command.\nTo read more about snakemake, please refer to the official Snakemake documentation.\nInstall snakemake on O2 terminal:\n\nmamba create -n snakemake_8_20_3 -c conda-forge -c bioconda snakemake=8.20.3  snakemake-executor-plugin-slurm  snakemake-executor-plugin-slurm-jobstep\n\nTo use snakemake, activate this environment maintained by mamba:\n\nmamba activate snakemake_8_20_3",
    "crumbs": [
      "About the Kwon Lab",
      "Getting Started",
      "</b> Installation"
    ]
  },
  {
    "objectID": "materials/getting-started/installation/index.html#vscode",
    "href": "materials/getting-started/installation/index.html#vscode",
    "title": "Installation instructions",
    "section": "VSCode",
    "text": "VSCode\nVSCode is a code text editor application that provides an easy-to-use interface for viewing and writing code/scripts. This section will detail how to 1) install VSCode as an application on your computer, 2) install VSCode extensions and 3) setup launching VSCode as an interface to view and edit your files on the O2 cluster.\n\nInstall VSCode application\nTo install VSCode on your computer, use this link.\n\n\nInstall VSCode extensions\nVSCode has a number of extensions that allow each user to customize their own coding experience. We recommend the installation of three extensions:\n\nRainbow CSV - identifies “,” as the separator in CSV files, highlights each column with a different color\nVSCode-pdf - view PDF files directly within the VSCode interface\nRemote-SSH - allows users to login and access their own HPC cluster and view their files through the VSCode interface (see next section)\n\nTo install extensions:\n\nNavigate to the toolbar on the far left of the VSCode interface and click on the icon that resembles four squares.\nUse the search bar that has the caption “Search Extensions in Marketplace” to find extensions that you like and install each of them individually.\nAn additional step for Remote-SSH installation involves changing the connect timeout setting. As O2 login requires Duo authentication, there is often a slight delay and more time is needed to complete the authentication and login properly. To adjust this, please follow steps 4-6.\nNavigate to the extension page for Remote-SSH (on the toolbar on the far left, select the icon with four squares, then input remote-ssh into the search bar) \n\nSelect the gear button and press Settings \n\nInput 120 seconds for the Remote.SSH: Connect Timeout parameter \n\n\n\n\nSetup O2 access with VSCode: Launch VSCode on O2 login node\nWhile logging into O2 on the terminal only provides a command-line interface and linux commands are needed to modify files, the main advantage of accessing O2 through VSCode is it allows users to easily view and edit their files in an interactive manner within the VSCode application.\nAfter installation of VSCode and the Remote-SSH extension, establish a SSH connection to O2 through VSCode:\n\nPress the bottom left purple icon to ‘Open a Remote Window’. This will prompt a few options to be displayed at the top near the search bar \nSelect ‘Add New SSH Host’ and then input the following and enter\n\n\n&lt;hms_id&gt;@o2.hms.harvard.edu\n\n\nSelect &lt;path to config&gt;/.ssh/config as the SSH configuration file to update\nInput password for O2 login\nComplete Duo authentication\nLogin complete (Note: login may take longer at the first instance because VSCode will download its own server.)\n\nAfter setup, directly click the bottom left purple icon each time and input login credentials to launch O2 on VSCode each time.\n\n\nSetup O2 access with VSCode: Launch VSCode on O2 compute node\nAfter setting up VSCode, Remote-SSH extension and establishing a connection to O2 login node through VSCode, follow these steps to launch VSCode on a compute node in O2. This is useful if you plan to use VSCode to open or edit larger files as this may be a process that is too computationally intensive for login nodes to handle, leading the O2 cluster to automatically terminate your connection to O2 through VSCode. For a more detailed description, please refer to the official O2 documentation on VSCode, which was used as a reference for this section.\n\nGenerate SSH key on your own computer’s terminal with the following command. When prompted for file name, press enter to use the default file name. Enter a passphrase to protect your SSH keys.\n\n\n# input this line into your computer's terminal\nssh-keygen -t rsa\n\n# sample output (See O2 documentation for reference)\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/USERHOME/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /USERHOME/.ssh/id_rsa.\nYour public key has been saved in /USERHOME/.ssh/id_rsa.pub.\nThe key fingerprint is:\na5:b5:38:73:b7:3c:a6:8a:1d:a8:bd:87:4e:be:33:21 \n\n\nCopy your computer’s SSH public key onto the O2 SSH authorized_keys file, which allows your computer and O2 to recognize each other\n\n\nLinux or Mac:\n\n\n# input this line into your computer's terminal\nssh-copy-id -i $HOME/.ssh/id_rsa.pub &lt;hms_id&gt;@o2.hms.harvard.edu\n# input O2 password and complete Duo authentication\n\n\nWindows:\n\n\n# input this line into your computer's terminal\nGet-Content \"$env:USERPROFILE\\.ssh\\id_rsa.pub\" | ssh &lt;hms_id&gt;@o2.hms.harvard.edu \"mkdir -p ~/.ssh && cat &gt;&gt; ~/.ssh/authorized_keys\"\n# input O2 password and complete Duo authentication\n\n\nAdd new lines in your computer’s SSH config file. Replace HMS ID with your own ID. After modification, use Ctrl + X followed by enter to save the file.\n\n\n# input this line into your computer's terminal\n# open your computer's SSH config file\nnano ~/.ssh/config\n\n#for Windows systems use\nnotepad $env:USERPROFILE\\.ssh\\config\n\n# copy and paste the following lines into the config file\nHost o2jump\n  HostName o2.hms.harvard.edu\n  User &lt;hms_id&gt;\n  ForwardAgent yes\n  ForwardX11 yes\n  ForwardX11Trusted yes\n\nHost o2job\n  HostName compute_node_of_job\n  User &lt;hms_id&gt;\n  ProxyJump o2jump\n  ForwardAgent yes\n\n\nRequest a compute node on O2, update your local config file with the node information for VSCode with the following command. Please use the command appropriate for your operating system, as the syntax varies slightly. Your requested compute node will be allocated with a 1 hour runtime, 4GB memory and 1 core.\n\n\nLinux:\n\n\n# input this line into your computer's terminal\nssh &lt;hms_id&gt;@o2.hms.harvard.edu \"/n/groups/kwon/joseph/submit_o2.sh\" | tail -n 1 | xargs -I {} sed -i \"/^Host o2job$/,/^\\s*Host /{s/^\\(\\s*HostName\\s*\\).*$/\\1{}/}\" ~/.ssh/config\n\n\nMac:\n\n\n# input this line into your computer's terminal\nssh &lt;hms_id&gt;@o2.hms.harvard.edu \"/n/groups/kwon/joseph/submit_o2.sh\" | tail -n 1 | xargs -I {} | xargs -I NODE_HOSTNAME sed -i '' \"/^Host o2job$/,/^[[:space:]]*Host / s/^\\([[:space:]]*HostName[[:space:]]*\\).*/\\1NODE_HOSTNAME/\" ~/.ssh/config\n\n\nWindows:\n\n\n# input this line into your computer's terminal\n$nodeHostname = (ssh &lt;hms_id&gt;@o2.hms.harvard.edu \"/n/groups/kwon/joseph/submit_o2.sh\" | Select-Object -Last 1); (Get-Content \"$env:USERPROFILE\\.ssh\\config\") | ForEach-Object { if ($_ -match 'Host o2job') { $_; $foundJob = $true } elseif ($foundJob -and $_ -match '^\\s*HostName\\s+') { $foundJob = $false; $_ -replace '(?&lt;=HostName\\s*)\\S+', $nodeHostname } else { $_ } } | Set-Content \"$env:USERPROFILE\\.ssh\\config\"\n\n\nOpen VSCode, select the bottom left purple icon to launch the remote connection. Select ‘Connect to Host’ and o2job as the server. Proceed by inputting O2 login password and completing Duo authentication. Select ‘Continue’ to proceed.\n\nSetup for launching VSCode on a O2 compute node is now complete. After setup, it is only necessary to execute Steps 4-5 each time to launch this.\n\n\nNavigate to your O2 directory in VSCode\nFollowing launching VSCode on either an O2 login or a compute node, navigate to your own O2 directory:\n\nNavigate to the top bar in VSCode and press File &gt; Open Folder\nType in path (e.g. /n/groups/kwon/&lt;your name&gt;)\nBegin to edit and view files in directory",
    "crumbs": [
      "About the Kwon Lab",
      "Getting Started",
      "</b> Installation"
    ]
  },
  {
    "objectID": "materials/rnaseq/background/index.html",
    "href": "materials/rnaseq/background/index.html",
    "title": "Background",
    "section": "",
    "text": "Work in progress\n\n\nIntroduction to the pipeline\nThis pipeline quantifies RNA-sequenced reads relative to genes/transcripts in the genome and normalizes the resulting data. It uses Kraken2 for filtering human reads and nf-core/rnaseq for the core trimming, alignments, and quantification. It does not compare the samples statistically, so for downstream analyses, the output files from this pipeline can be analysed directly in statistical environments like R.\n\n\nInputs\nThis pipeline takes a sample sheet and fastq files (ideally in /n/groups/kwon/data1/sequencing_run_archive_DO_NOT_EDIT/) as input and works for both single and paired-end reads.\n\n\nOutputs\nQC report, gene counts, normalized gene counts, QC reports, etc.\n\n\n\n\n\n\nCredits to Kraken2 and nf-core/rnaseq",
    "crumbs": [
      "About the Kwon Lab",
      "RNAseq",
      "Background"
    ]
  }
]