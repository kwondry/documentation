[
  {
    "objectID": "materials/rnaseq/walkthrough/index.html",
    "href": "materials/rnaseq/walkthrough/index.html",
    "title": "RNA-Seq Pipeline Tutorial",
    "section": "",
    "text": "Detailed steps on processing RNA Sequencing data\nHere we walk through the Kwon Lab RNA-Seq pipeline. The pipeline integrates steps from an nf-core rnaseq pipeline into an executable snakemake pipeline. The end product is a gene expression matrix and a QC report for further downstream analysis.\nEstimated time for completion ~1 hour",
    "crumbs": [
      "About the Kwon Lab",
      "RNAseq",
      "Walkthrough"
    ]
  },
  {
    "objectID": "materials/rnaseq/walkthrough/index.html#downloading-the-pipeline",
    "href": "materials/rnaseq/walkthrough/index.html#downloading-the-pipeline",
    "title": "RNA-Seq Pipeline Tutorial",
    "section": "Downloading the pipeline",
    "text": "Downloading the pipeline\nLaunch VSCode on an O2 compute node. More instructions can be found here.\nOpen a terminal within VSCode. Click terminal in the top bar and new terminal. You should be on a compute node and within your groups folder. You can check where you currently are in the file system with pwd.\n\nDownload the pipeline by running the following commands. This is where your pipeline will be located and you can go into the folder with cd. Running ls will show all pipeline files.\n\n# Downloading the pipeline\nwget https://github.com/kwondry/rnaseq_gene_expression/archive/refs/heads/main.zip\n\n# Unzip and rename the folder\nunzip main.zip -d my_rnaseq_run && rm main.zip\n\n# Navigate into your rnaseq pipeline folder\ncd my_rnaseq_run/rnaseq_gene_expression-main\n\n\nYou will now have a rnaseq_gene_expression-main folder that contains all the required files.",
    "crumbs": [
      "About the Kwon Lab",
      "RNAseq",
      "Walkthrough"
    ]
  },
  {
    "objectID": "materials/rnaseq/walkthrough/index.html#creating-a-sample-sheet",
    "href": "materials/rnaseq/walkthrough/index.html#creating-a-sample-sheet",
    "title": "RNA-Seq Pipeline Tutorial",
    "section": "Creating a sample sheet",
    "text": "Creating a sample sheet\nA sample sheet will define which samples you want to include in the run and provide file paths for each sample.\nDownload an example sample sheet here.\nEdit this sample sheet with explicit file paths for each sample that want included in the run. You can edit the raw csv in Excel or any editor you’d like and add your samples with explicit, absolute filepaths starting from /n/.\n\n\ninput sample_sheet.csv columns\n\n\n\n\n\n\n\n\n\nsample\nfastq_1\nfastq_2\nstrandedness\n\n\n\n\nSample IDs\nFile path for forward reads\nFile path for reverse reads. If your sequences are single end, leave this column empty\nSet as auto for each sample. However, for samples with high contaminants coming from smartseq2, it should be set as both.\n\n\n\n\n\nThe filepaths should be similar in structure to:\n/n/groups/kwon/data1/sequencing_run_archive_DO_NOT_EDIT/&lt;your sequencing run&gt;/&lt;filename_for_sample&gt;.\nAll files must be gzipped (have .gz extension.)\nAfter updating the example sample sheet, save it as a comma-delimited file or .csv.\n\n\n\n\nUploading your samplesheet\nNext, we need to upload the updated sample sheet into the pipeline folder. This can be done by dragging that the updated folder from its current location into the VSCode sidebar in the input folder. VSCode may prompt you asking to if you want to replace the current file and confirm.\n\nYou can click the sample_sheet.csv to confirm it has your updated samples.",
    "crumbs": [
      "About the Kwon Lab",
      "RNAseq",
      "Walkthrough"
    ]
  },
  {
    "objectID": "materials/rnaseq/walkthrough/index.html#running-the-pipeline",
    "href": "materials/rnaseq/walkthrough/index.html#running-the-pipeline",
    "title": "RNA-Seq Pipeline Tutorial",
    "section": "Running the pipeline",
    "text": "Running the pipeline\n\nTesting the pipeline\nTo ensure everything is set up properly, we can run the pipeline on a test dataset.\nNavigate back to the VSCode terminal and check that you are in your pipeline folder. To run the test data, activate the snakemake environment and run snakemake with the following.\n\n# Activates the mamba environment \nmamba activate snakemake \n\n# Runs the test data through the pipeline\nsnakemake --use-conda test\n\nThis will run the test data interactivately and you will be able to watch the pipeline run each step. This may up to 40 minutes, so now is a good time for a tea break.\n\nAfter the pipeline finishes, you should see a folder generated in your pipeline folder called test_results. If you see a multiqc/star_salmon/nfcore_rnaseq_test_multiqc_report.html file inside the two sub folders, the pipeline has successfully finished.\n\n\n\n\n\nRunning the pipeline\nAlmost there! All that’s left is running your samples through the pipeline.\nOnce you have the updated sample sheet with your samples in the input folder inside the pipeline directory, navigate back again to the VSCode terminal. Submit the pipeline with the following.\n\n# Activates the mamba environment \nmamba activate snakemake \n\n# Submits a job with slurm\nsbatch submit_jobs.sh\n\n\nThis will submit the snakemake pipeline as a job, so you do not need to keep everything open. Depending on the number of samples and reads, the pipeline may take a few hours to days to finish.",
    "crumbs": [
      "About the Kwon Lab",
      "RNAseq",
      "Walkthrough"
    ]
  },
  {
    "objectID": "materials/rnaseq/walkthrough/index.html#saving-outputs",
    "href": "materials/rnaseq/walkthrough/index.html#saving-outputs",
    "title": "RNA-Seq Pipeline Tutorial",
    "section": "Saving outputs",
    "text": "Saving outputs",
    "crumbs": [
      "About the Kwon Lab",
      "RNAseq",
      "Walkthrough"
    ]
  },
  {
    "objectID": "materials/r-tutorial/slides.html#section",
    "href": "materials/r-tutorial/slides.html#section",
    "title": "tidyverse for data analysis",
    "section": "",
    "text": "Workshop materials are here:\nhttps://kwondry.github.io/documentation/"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#section-1",
    "href": "materials/r-tutorial/slides.html#section-1",
    "title": "tidyverse for data analysis",
    "section": "",
    "text": "Goals for this session\n\n\nRStudio and the Quarto notebook\nLoading and writing tabular data\nData wrangling and make plots with the tidyverse\nTables and statistics"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#create-an-r-project",
    "href": "materials/r-tutorial/slides.html#create-an-r-project",
    "title": "tidyverse for data analysis",
    "section": "Create an R Project",
    "text": "Create an R Project\n\n\nCreate a project for today’s workshop and download the data."
  },
  {
    "objectID": "materials/r-tutorial/slides.html#create-an-r-project-1",
    "href": "materials/r-tutorial/slides.html#create-an-r-project-1",
    "title": "tidyverse for data analysis",
    "section": "Create an R Project",
    "text": "Create an R Project\n\n\n\nFile -&gt; New Project…"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#create-an-r-project-2",
    "href": "materials/r-tutorial/slides.html#create-an-r-project-2",
    "title": "tidyverse for data analysis",
    "section": "Create an R Project",
    "text": "Create an R Project\n\n\n\nClick on New Directory"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#create-an-r-project-3",
    "href": "materials/r-tutorial/slides.html#create-an-r-project-3",
    "title": "tidyverse for data analysis",
    "section": "Create an R Project",
    "text": "Create an R Project\n\n\n\nNavigate to the workshop_2 folder name your directory and click “Create Project”"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#create-an-r-project-4",
    "href": "materials/r-tutorial/slides.html#create-an-r-project-4",
    "title": "tidyverse for data analysis",
    "section": "Create an R Project",
    "text": "Create an R Project\n\n\n\nYou made a project! This creates a file for you with the .qmd extension"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#create-an-r-project-5",
    "href": "materials/r-tutorial/slides.html#create-an-r-project-5",
    "title": "tidyverse for data analysis",
    "section": "Create an R Project",
    "text": "Create an R Project\n\n\n\nSwitch from “visual” to “source” to see the plain-text version of this document."
  },
  {
    "objectID": "materials/r-tutorial/slides.html#create-an-r-project-6",
    "href": "materials/r-tutorial/slides.html#create-an-r-project-6",
    "title": "tidyverse for data analysis",
    "section": "Create an R Project",
    "text": "Create an R Project\n\n\n\nClick on “Render” to ask Quarto to turn this plain-text document into an HTML page"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#create-an-r-project-7",
    "href": "materials/r-tutorial/slides.html#create-an-r-project-7",
    "title": "tidyverse for data analysis",
    "section": "Create an R Project",
    "text": "Create an R Project\n\n\n\nYour default web-browser will open and show you the rendered document!"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#what-are-the-parts-of-rstudio",
    "href": "materials/r-tutorial/slides.html#what-are-the-parts-of-rstudio",
    "title": "tidyverse for data analysis",
    "section": "What are the parts of RStudio?",
    "text": "What are the parts of RStudio?"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#the-text-editor",
    "href": "materials/r-tutorial/slides.html#the-text-editor",
    "title": "tidyverse for data analysis",
    "section": "The text editor",
    "text": "The text editor"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#the-console",
    "href": "materials/r-tutorial/slides.html#the-console",
    "title": "tidyverse for data analysis",
    "section": "The console",
    "text": "The console"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#the-right-panes",
    "href": "materials/r-tutorial/slides.html#the-right-panes",
    "title": "tidyverse for data analysis",
    "section": "The right panes",
    "text": "The right panes"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#installing-and-loading-packages",
    "href": "materials/r-tutorial/slides.html#installing-and-loading-packages",
    "title": "tidyverse for data analysis",
    "section": "Installing and loading packages",
    "text": "Installing and loading packages\n\nPackages are a collection of functions and objects that are shared for free to use.\nIn the console, you can type e.g. install.packages(\"tidyverse\") to install most R packages.\nSometimes R packages need to be installed a different way, and the documentation of the package will tell you how.\nThen, to load a package, add library(\"tidyverse\") in a code chunk (usually in the first code cell of your document)"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#quartos-code-chunk",
    "href": "materials/r-tutorial/slides.html#quartos-code-chunk",
    "title": "tidyverse for data analysis",
    "section": "Quarto’s Code Chunk",
    "text": "Quarto’s Code Chunk\nYou can quickly insert chunks like these into your file with\n\nthe keyboard shortcut Ctrl + Alt + I (OS X: Cmd + Option + I)\nthe Add Chunk  command in the editor toolbar\n\nor by typing the chunk delimiters\n```{r}\n```\n\nExample chunk:\n\n\n```{r}\n10 + 5\n```\n\nTry writing a math expression in a code chunk, and hitting the  button or Ctrl + Alt + Enter (OS X: Cmd + Option + Enter) to run the chunk."
  },
  {
    "objectID": "materials/r-tutorial/slides.html#writing-code-assigning-variables",
    "href": "materials/r-tutorial/slides.html#writing-code-assigning-variables",
    "title": "tidyverse for data analysis",
    "section": "Writing code: assigning variables",
    "text": "Writing code: assigning variables\nYou can use &lt;- or = to assign values to variables\na &lt;- 6\nb = 8\nc &lt;- 5.44\nd = TRUE\ne = \"hello world\" \ne &lt;- 'hello world' # same as double quote\nWe will use &lt;- for all examples going forward."
  },
  {
    "objectID": "materials/r-tutorial/slides.html#naming-variables",
    "href": "materials/r-tutorial/slides.html#naming-variables",
    "title": "tidyverse for data analysis",
    "section": "Naming variables",
    "text": "Naming variables\nA lot of R people use . inside variable names, but in most languages besides R this would be an error. It’s good practice these days to use the _ underscore if you want separation in your variable names.\nr.people.sometimes.put.dots &lt;- TRUE\ndots.are.confusing &lt;- \"maybe\"\njust_use_underscores &lt;- \"please\""
  },
  {
    "objectID": "materials/r-tutorial/slides.html#functions",
    "href": "materials/r-tutorial/slides.html#functions",
    "title": "tidyverse for data analysis",
    "section": "Functions",
    "text": "Functions\nFunctions are named bits of code that take parameters as input and return some output\n\nlibrary(tidyverse)\nword_1 &lt;- \"hello\"\nword_2 &lt;- \"world\"\nstr_c(word_1, word_2, sep = \" \")\n\n[1] \"hello world\"\n\n\nstr_c is a function that puts concatenates strings.\nfunctions can have named parameters as well as positional parameters.\nnamed parameters always take an = sign for assignment."
  },
  {
    "objectID": "materials/r-tutorial/slides.html#getting-help-with-functions",
    "href": "materials/r-tutorial/slides.html#getting-help-with-functions",
    "title": "tidyverse for data analysis",
    "section": "Getting help with functions",
    "text": "Getting help with functions\n\n\n\nType ?str_c in the console to get a help page. check out this guide on how to read the R help pages.\nGoogle! Add “tidyverse” to search queries to get more relevant results.\nphind.com and chat.deepseek.com are good free AI services for getting help with code."
  },
  {
    "objectID": "materials/r-tutorial/slides.html#value-types-in-r",
    "href": "materials/r-tutorial/slides.html#value-types-in-r",
    "title": "tidyverse for data analysis",
    "section": "Value types in R",
    "text": "Value types in R\nThe type of the value can be\n# numeric\nc(1,2,3,4) \n\n# character\nc(\"a\",\"b\",\"c\",\"d\")\n\n# boolean\nc(TRUE, FALSE)\n\n# factor\nc(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\") %&gt;% as_factor()"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#examples-of-coding",
    "href": "materials/r-tutorial/slides.html#examples-of-coding",
    "title": "tidyverse for data analysis",
    "section": "Examples of coding",
    "text": "Examples of coding\nQuick live demo of doing some work in R\n\nAssigning variables\nVectors are magic\nFunctions and getting help\n\n\n\n\n−+\n05:00"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#test-data-for-today",
    "href": "materials/r-tutorial/slides.html#test-data-for-today",
    "title": "tidyverse for data analysis",
    "section": "Test data for today",
    "text": "Test data for today\n\n\n \n\n\n\nBacterial growth measurements with different species\nMeasured as an optical density (OD) of the culture at the end of the experiment\nGrowth measured with different concentrations of different long-chain fatty acids added to the media"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#get-the-data",
    "href": "materials/r-tutorial/slides.html#get-the-data",
    "title": "tidyverse for data analysis",
    "section": "Get the data",
    "text": "Get the data\nDownload the data from kwondry.github.io/documentation/r-tutorial. Put it in a folder called data inside your R project folder.\n\n\n\n⤓metadata.csv\n\n⤓plate_1_data.csv\n\n⤓plate_2_data.csv\n\n⤓plate_3_data.csv\n\n⤓plate_4_data.csv\n\n\n\n\ncodebook:\nplate_id – an identifier of which plate was measured. row – row of the plate1\ncolumn – column of the plate\nbug – the isolate/species that was tested in this well\ncondition - which long chain fatty acid (LCFA) was added\nconc - what was the concentration of the LCFA in this well?\nrow – row of the plate\ncolumn – column of the plate\nod - the optical density (OD600) that was measured in this well. This is a measure of bacterial growth."
  },
  {
    "objectID": "materials/r-tutorial/slides.html#read-in-data",
    "href": "materials/r-tutorial/slides.html#read-in-data",
    "title": "tidyverse for data analysis",
    "section": "Read in data",
    "text": "Read in data\nData is often in tables, and the easiest way to store tabular data is in csv or tsv format.\ncsv - comma separated values\ntsv - tab separated values\nto read in data stored this way use read_csv(filename) or read_tsv(filename)\nmetadata &lt;- read_csv(\"data/metadata.csv\")"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#binding-tables-together",
    "href": "materials/r-tutorial/slides.html#binding-tables-together",
    "title": "tidyverse for data analysis",
    "section": "binding tables together",
    "text": "binding tables together\nWe have data from 4 different plates in separate csv files. Use bind_rows to make a single table with all the data.\nplate_1 &lt;- read_csv(\"data/plate_1_data.csv\")\nplate_2 &lt;- read_csv(\"data/plate_2_data.csv\")\nplate_3 &lt;- read_csv(\"data/plate_3_data.csv\")\nplate_4 &lt;- read_csv(\"data/plate_4_data.csv\")\n\nall_plate_data &lt;- bind_rows(plate_1, plate_2, plate_3, plate_4)"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#joining-metadata-to-the-data",
    "href": "materials/r-tutorial/slides.html#joining-metadata-to-the-data",
    "title": "tidyverse for data analysis",
    "section": "joining metadata to the data",
    "text": "joining metadata to the data\nConnect the metadata to the plate reader data using left_join\n\njoined_data &lt;- all_plate_data %&gt;%\n  left_join(metadata)"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#tibbles-aka-data-frames",
    "href": "materials/r-tutorial/slides.html#tibbles-aka-data-frames",
    "title": "tidyverse for data analysis",
    "section": "tibbles (aka data frames)",
    "text": "tibbles (aka data frames)\ntibbles are the big reason R is great for working with tabular data.\nA data frame is a rectangular collection of variables (in the columns) and observations (in the rows).\n\njoined_data\n\n# A tibble: 384 × 7\n      od plate_id row   column bug       condition  conc\n   &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;\n 1 0.206        1 a          1 CTRL      CTRL          0\n 2 0.171        1 a          2 crispatus CTRL          0\n 3 0.136        1 a          3 crispatus CTRL          0\n 4 0.131        1 a          4 crispatus CTRL          0\n 5 0.137        1 a          5 jensenii  CTRL          0\n 6 0.14         1 a          6 jensenii  CTRL          0\n 7 0.144        1 a          7 jensenii  CTRL          0\n 8 0.126        1 a          8 iners     CTRL          0\n 9 0.13         1 a          9 iners     CTRL          0\n10 0.127        1 a         10 iners     CTRL          0\n# ℹ 374 more rows"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#the-pipe-or-feeds-data-into-functions",
    "href": "materials/r-tutorial/slides.html#the-pipe-or-feeds-data-into-functions",
    "title": "tidyverse for data analysis",
    "section": "The pipe %>% or |> feeds data into functions",
    "text": "The pipe %&gt;% or |&gt; feeds data into functions\n\n```{r}\nhead(joined_data) # show the first few rows\n```\n\n# A tibble: 6 × 7\n     od plate_id row   column bug       condition  conc\n  &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;\n1 0.206        1 a          1 CTRL      CTRL          0\n2 0.171        1 a          2 crispatus CTRL          0\n3 0.136        1 a          3 crispatus CTRL          0\n4 0.131        1 a          4 crispatus CTRL          0\n5 0.137        1 a          5 jensenii  CTRL          0\n6 0.14         1 a          6 jensenii  CTRL          0"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#the-pipe-or-feeds-data-into-functions-1",
    "href": "materials/r-tutorial/slides.html#the-pipe-or-feeds-data-into-functions-1",
    "title": "tidyverse for data analysis",
    "section": "The pipe %>% or |> feeds data into functions",
    "text": "The pipe %&gt;% or |&gt; feeds data into functions\n\n```{r}\njoined_data %&gt;%\n  head()\n```\n\n# A tibble: 6 × 7\n     od plate_id row   column bug       condition  conc\n  &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;\n1 0.206        1 a          1 CTRL      CTRL          0\n2 0.171        1 a          2 crispatus CTRL          0\n3 0.136        1 a          3 crispatus CTRL          0\n4 0.131        1 a          4 crispatus CTRL          0\n5 0.137        1 a          5 jensenii  CTRL          0\n6 0.14         1 a          6 jensenii  CTRL          0"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#the-pipe-or-feeds-data-into-functions-2",
    "href": "materials/r-tutorial/slides.html#the-pipe-or-feeds-data-into-functions-2",
    "title": "tidyverse for data analysis",
    "section": "The pipe %>% or |> feeds data into functions",
    "text": "The pipe %&gt;% or |&gt; feeds data into functions\n\n```{r}\njoined_data %&gt;%\n  head() %&gt;%\n  tail(1)\n```\n\n# A tibble: 1 × 7\n     od plate_id row   column bug      condition  conc\n  &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;     &lt;dbl&gt;\n1  0.14        1 a          6 jensenii CTRL          0"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#pick-rows-from-a-table-filter",
    "href": "materials/r-tutorial/slides.html#pick-rows-from-a-table-filter",
    "title": "tidyverse for data analysis",
    "section": "Pick rows from a table: filter()",
    "text": "Pick rows from a table: filter()"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#filter-only-the-first-row-of-plates",
    "href": "materials/r-tutorial/slides.html#filter-only-the-first-row-of-plates",
    "title": "tidyverse for data analysis",
    "section": "Filter only the first row of plates",
    "text": "Filter only the first row of plates\n\n```{r}\njoined_data %&gt;%\n  filter(row == \"a\")\n```\n\n# A tibble: 48 × 7\n      od plate_id row   column bug       condition  conc\n   &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;\n 1 0.206        1 a          1 CTRL      CTRL          0\n 2 0.171        1 a          2 crispatus CTRL          0\n 3 0.136        1 a          3 crispatus CTRL          0\n 4 0.131        1 a          4 crispatus CTRL          0\n 5 0.137        1 a          5 jensenii  CTRL          0\n 6 0.14         1 a          6 jensenii  CTRL          0\n 7 0.144        1 a          7 jensenii  CTRL          0\n 8 0.126        1 a          8 iners     CTRL          0\n 9 0.13         1 a          9 iners     CTRL          0\n10 0.127        1 a         10 iners     CTRL          0\n# ℹ 38 more rows"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#filter-out-samples-with-od-0.5",
    "href": "materials/r-tutorial/slides.html#filter-out-samples-with-od-0.5",
    "title": "tidyverse for data analysis",
    "section": "Filter out samples with OD > 0.5",
    "text": "Filter out samples with OD &gt; 0.5\n\n```{r}\njoined_data %&gt;%\n  filter(od &gt; 0.5)\n```\n\n# A tibble: 20 × 7\n      od plate_id row   column bug       condition  conc\n   &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;\n 1 0.534        1 b          7 jensenii  OA          400\n 2 0.61         1 f          5 jensenii  VCA         400\n 3 0.626        1 f          6 jensenii  VCA         400\n 4 0.627        1 f          7 jensenii  VCA         400\n 5 0.747        3 b          2 gasseri   OA          400\n 6 0.769        3 b          3 gasseri   OA          400\n 7 0.75         3 b          4 gasseri   OA          400\n 8 0.652        3 b          7 vaginalis OA          400\n 9 0.631        3 c          2 gasseri   OA          200\n10 0.607        3 c          3 gasseri   OA          200\n11 0.624        3 c          4 gasseri   OA          200\n12 0.908        3 f          2 gasseri   VCA         400\n13 0.924        3 f          3 gasseri   VCA         400\n14 0.867        3 f          4 gasseri   VCA         400\n15 0.73         3 g          2 gasseri   VCA         200\n16 0.764        3 g          3 gasseri   VCA         200\n17 0.725        3 g          4 gasseri   VCA         200\n18 0.688        4 b          2 gasseri   VCA         100\n19 0.636        4 b          3 gasseri   VCA         100\n20 0.591        4 b          4 gasseri   VCA         100"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#pick-columns-from-a-table-select",
    "href": "materials/r-tutorial/slides.html#pick-columns-from-a-table-select",
    "title": "tidyverse for data analysis",
    "section": "Pick columns from a table: select()",
    "text": "Pick columns from a table: select()"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#pick-columns-plate_id-and-od",
    "href": "materials/r-tutorial/slides.html#pick-columns-plate_id-and-od",
    "title": "tidyverse for data analysis",
    "section": "Pick columns plate_id, and od",
    "text": "Pick columns plate_id, and od\n\n```{r}\njoined_data %&gt;%\n  select(plate_id, od)\n```\n\n# A tibble: 384 × 2\n   plate_id    od\n      &lt;dbl&gt; &lt;dbl&gt;\n 1        1 0.206\n 2        1 0.171\n 3        1 0.136\n 4        1 0.131\n 5        1 0.137\n 6        1 0.14 \n 7        1 0.144\n 8        1 0.126\n 9        1 0.13 \n10        1 0.127\n# ℹ 374 more rows"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#rename-columns-and-subset-with-select",
    "href": "materials/r-tutorial/slides.html#rename-columns-and-subset-with-select",
    "title": "tidyverse for data analysis",
    "section": "Rename columns and subset with select",
    "text": "Rename columns and subset with select\n\n```{r}\njoined_data %&gt;%\n  select(plate_id, optical_density=od)\n```\n\n# A tibble: 384 × 2\n   plate_id optical_density\n      &lt;dbl&gt;           &lt;dbl&gt;\n 1        1           0.206\n 2        1           0.171\n 3        1           0.136\n 4        1           0.131\n 5        1           0.137\n 6        1           0.14 \n 7        1           0.144\n 8        1           0.126\n 9        1           0.13 \n10        1           0.127\n# ℹ 374 more rows"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#sort-the-rows-in-a-table-arrange",
    "href": "materials/r-tutorial/slides.html#sort-the-rows-in-a-table-arrange",
    "title": "tidyverse for data analysis",
    "section": "Sort the rows in a table: arrange()",
    "text": "Sort the rows in a table: arrange()"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#sort-samples-by-od-ascending",
    "href": "materials/r-tutorial/slides.html#sort-samples-by-od-ascending",
    "title": "tidyverse for data analysis",
    "section": "Sort samples by OD ascending",
    "text": "Sort samples by OD ascending\n\n```{r}\njoined_data %&gt;%\n  arrange(od)\n```\n\n# A tibble: 384 × 7\n      od plate_id row   column bug      condition  conc\n   &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;     &lt;dbl&gt;\n 1 0.113        1 h         11 CTRL     CTRL          0\n 2 0.113        1 h         12 CTRL     CTRL          0\n 3 0.113        2 h         11 CTRL     CTRL          0\n 4 0.114        1 e         12 CTRL     OA           50\n 5 0.114        1 h          1 CTRL     CTRL          0\n 6 0.114        2 h          1 CTRL     CTRL          0\n 7 0.114        2 h         12 CTRL     CTRL          0\n 8 0.115        1 d         12 CTRL     OA          100\n 9 0.115        2 a         11 CTRL     CTRL          0\n10 0.115        2 h          5 jensenii CTRL          0\n# ℹ 374 more rows"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#sort-samples-by-od-descending",
    "href": "materials/r-tutorial/slides.html#sort-samples-by-od-descending",
    "title": "tidyverse for data analysis",
    "section": "Sort samples by OD, descending",
    "text": "Sort samples by OD, descending\n\n```{r}\njoined_data %&gt;%\n  arrange(desc(od))\n```\n\n# A tibble: 384 × 7\n      od plate_id row   column bug     condition  conc\n   &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;\n 1 0.924        3 f          3 gasseri VCA         400\n 2 0.908        3 f          2 gasseri VCA         400\n 3 0.867        3 f          4 gasseri VCA         400\n 4 0.769        3 b          3 gasseri OA          400\n 5 0.764        3 g          3 gasseri VCA         200\n 6 0.75         3 b          4 gasseri OA          400\n 7 0.747        3 b          2 gasseri OA          400\n 8 0.73         3 g          2 gasseri VCA         200\n 9 0.725        3 g          4 gasseri VCA         200\n10 0.688        4 b          2 gasseri VCA         100\n# ℹ 374 more rows"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#counting-things",
    "href": "materials/r-tutorial/slides.html#counting-things",
    "title": "tidyverse for data analysis",
    "section": "Counting things",
    "text": "Counting things\nTo demonstrate counting, let’s switch to metadata\n\n```{r}\njoined_data\n```\n\n# A tibble: 384 × 7\n      od plate_id row   column bug       condition  conc\n   &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;\n 1 0.206        1 a          1 CTRL      CTRL          0\n 2 0.171        1 a          2 crispatus CTRL          0\n 3 0.136        1 a          3 crispatus CTRL          0\n 4 0.131        1 a          4 crispatus CTRL          0\n 5 0.137        1 a          5 jensenii  CTRL          0\n 6 0.14         1 a          6 jensenii  CTRL          0\n 7 0.144        1 a          7 jensenii  CTRL          0\n 8 0.126        1 a          8 iners     CTRL          0\n 9 0.13         1 a          9 iners     CTRL          0\n10 0.127        1 a         10 iners     CTRL          0\n# ℹ 374 more rows"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#counting-things-1",
    "href": "materials/r-tutorial/slides.html#counting-things-1",
    "title": "tidyverse for data analysis",
    "section": "Counting things",
    "text": "Counting things\n\n```{r}\njoined_data %&gt;%\n  count(bug)\n```\n\n# A tibble: 7 × 2\n  bug           n\n  &lt;chr&gt;     &lt;int&gt;\n1 CTRL         96\n2 crispatus    48\n3 gasseri      48\n4 iners        48\n5 jensenii     48\n6 piotii       48\n7 vaginalis    48"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#counting-things-2",
    "href": "materials/r-tutorial/slides.html#counting-things-2",
    "title": "tidyverse for data analysis",
    "section": "Counting things",
    "text": "Counting things\n\n```{r}\njoined_data %&gt;%\n  count(condition, conc, bug)\n```\n\n# A tibble: 91 × 4\n   condition  conc bug           n\n   &lt;chr&gt;     &lt;dbl&gt; &lt;chr&gt;     &lt;int&gt;\n 1 CTRL          0 CTRL         24\n 2 CTRL          0 crispatus    12\n 3 CTRL          0 gasseri      12\n 4 CTRL          0 iners        12\n 5 CTRL          0 jensenii     12\n 6 CTRL          0 piotii       12\n 7 CTRL          0 vaginalis    12\n 8 LNA          50 CTRL          6\n 9 LNA          50 crispatus     3\n10 LNA          50 gasseri       3\n# ℹ 81 more rows"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#use-the-pipe-to-build-analysis-pipelines",
    "href": "materials/r-tutorial/slides.html#use-the-pipe-to-build-analysis-pipelines",
    "title": "tidyverse for data analysis",
    "section": "Use the pipe to build analysis pipelines",
    "text": "Use the pipe to build analysis pipelines\n\n```{r}\njoined_data %&gt;%\n  filter(bug == \"crispatus\")\n```\n\n# A tibble: 48 × 7\n      od plate_id row   column bug       condition  conc\n   &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;\n 1 0.171        1 a          2 crispatus CTRL          0\n 2 0.136        1 a          3 crispatus CTRL          0\n 3 0.131        1 a          4 crispatus CTRL          0\n 4 0.453        1 b          2 crispatus OA          400\n 5 0.478        1 b          3 crispatus OA          400\n 6 0.416        1 b          4 crispatus OA          400\n 7 0.383        1 c          2 crispatus OA          200\n 8 0.401        1 c          3 crispatus OA          200\n 9 0.37         1 c          4 crispatus OA          200\n10 0.303        1 d          2 crispatus OA          100\n# ℹ 38 more rows"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#use-the-pipe-to-build-analysis-pipelines-1",
    "href": "materials/r-tutorial/slides.html#use-the-pipe-to-build-analysis-pipelines-1",
    "title": "tidyverse for data analysis",
    "section": "Use the pipe to build analysis pipelines",
    "text": "Use the pipe to build analysis pipelines\n\n```{r}\njoined_data %&gt;%\n  filter(bug == \"crispatus\") %&gt;%\n  filter(conc &gt; 50) %&gt;%\n  select(plate_id, bug, condition)\n```\n\n# A tibble: 27 × 3\n   plate_id bug       condition\n      &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;    \n 1        1 crispatus OA       \n 2        1 crispatus OA       \n 3        1 crispatus OA       \n 4        1 crispatus OA       \n 5        1 crispatus OA       \n 6        1 crispatus OA       \n 7        1 crispatus OA       \n 8        1 crispatus OA       \n 9        1 crispatus OA       \n10        1 crispatus VCA      \n# ℹ 17 more rows"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#use-the-pipe-to-build-analysis-pipelines-2",
    "href": "materials/r-tutorial/slides.html#use-the-pipe-to-build-analysis-pipelines-2",
    "title": "tidyverse for data analysis",
    "section": "Use the pipe to build analysis pipelines",
    "text": "Use the pipe to build analysis pipelines\n\n```{r}\njoined_data %&gt;%\n  filter(bug == \"crispatus\") %&gt;%\n  filter(conc &gt; 50) %&gt;%\n  select(plate_id, bug, condition) %&gt;%\n  count(condition)\n```\n\n# A tibble: 3 × 2\n  condition     n\n  &lt;chr&gt;     &lt;int&gt;\n1 LNA           9\n2 OA            9\n3 VCA           9"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#adding-new-columns-to-a-table",
    "href": "materials/r-tutorial/slides.html#adding-new-columns-to-a-table",
    "title": "tidyverse for data analysis",
    "section": "Adding new columns to a table",
    "text": "Adding new columns to a table"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#make-a-new-table-column-mutate",
    "href": "materials/r-tutorial/slides.html#make-a-new-table-column-mutate",
    "title": "tidyverse for data analysis",
    "section": "Make a new table column: mutate()",
    "text": "Make a new table column: mutate()"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#example-concentration",
    "href": "materials/r-tutorial/slides.html#example-concentration",
    "title": "tidyverse for data analysis",
    "section": "Example: concentration",
    "text": "Example: concentration\nThe conc column is in units of uM. What if you needed it in mM? What’s the calculation?\n\n```{r}\nsample_n(metadata,5)\n```\n\n# A tibble: 5 × 6\n  plate_id row   column bug       condition  conc\n     &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;\n1        3 a          3 gasseri   CTRL          0\n2        4 a          8 piotii    CTRL          0\n3        4 g          8 piotii    LNA          50\n4        1 f          2 crispatus VCA         400\n5        2 c         12 CTRL      VCA          50"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#example-concentration-1",
    "href": "materials/r-tutorial/slides.html#example-concentration-1",
    "title": "tidyverse for data analysis",
    "section": "Example: concentration",
    "text": "Example: concentration\nThe conc column is in units of uM. What if you needed it in mM? What’s the calculation?\nTo get mM you would divide by 1000.\n\n```{r}\nsample_n(metadata,5)\n```\n\n# A tibble: 5 × 6\n  plate_id row   column bug       condition  conc\n     &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;\n1        1 e          2 crispatus OA           50\n2        3 c          7 vaginalis OA          200\n3        1 g          1 CTRL      VCA         200\n4        1 c         10 iners     OA          200\n5        2 h          6 jensenii  CTRL          0"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#example-concentration-2",
    "href": "materials/r-tutorial/slides.html#example-concentration-2",
    "title": "tidyverse for data analysis",
    "section": "Example: concentration",
    "text": "Example: concentration\nThe conc column is in units of uM. What if you needed it in mM? What’s the calculation?\nTo get mM you would divide by 1000.\n\n```{r}\nsample_n(metadata,5) %&gt;%\n  mutate(conc_mM = conc/1000)\n```\n\n# A tibble: 5 × 7\n  plate_id row   column bug       condition  conc conc_mM\n     &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1        3 b          7 vaginalis OA          400     0.4\n2        1 h         12 CTRL      CTRL          0     0  \n3        2 e          7 jensenii  LNA         200     0.2\n4        2 a          1 CTRL      CTRL          0     0  \n5        4 a          5 vaginalis CTRL          0     0"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#make-multiple-columns-at-once",
    "href": "materials/r-tutorial/slides.html#make-multiple-columns-at-once",
    "title": "tidyverse for data analysis",
    "section": "Make multiple columns at once",
    "text": "Make multiple columns at once\n\n```{r}\nsample_n(metadata,5) %&gt;%\n  mutate(conc_mM = conc/1000, conc_nM = conc*1000)\n```\n\n# A tibble: 5 × 8\n  plate_id row   column bug      condition  conc conc_mM conc_nM\n     &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n1        4 g         12 CTRL     LNA          50    0.05   50000\n2        1 f          1 CTRL     VCA         400    0.4   400000\n3        2 e          1 CTRL     LNA         200    0.2   200000\n4        1 f          6 jensenii VCA         400    0.4   400000\n5        2 c          6 jensenii VCA          50    0.05   50000"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#your-turn-to-do-some-data-wrangling",
    "href": "materials/r-tutorial/slides.html#your-turn-to-do-some-data-wrangling",
    "title": "tidyverse for data analysis",
    "section": "Your turn to do some data wrangling",
    "text": "Your turn to do some data wrangling\n\n\n\n−+\n15:00\n\n\n\nWrite code to answer the following questions?\n\nHow many different concentrations of LCFA are tested?\nHow many different LCFAs are tested on each plate?\nWhat bug has the highest OD seen in all the plates?\nWhat bug has the highest OD when no LCFA is added?\nWhat control well with no bug and no LCFA has the highest OD?"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#break",
    "href": "materials/r-tutorial/slides.html#break",
    "title": "tidyverse for data analysis",
    "section": "Break",
    "text": "Break\n\n\n\n−+\n15:00"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#plots-map-data-onto-graphical-elements.",
    "href": "materials/r-tutorial/slides.html#plots-map-data-onto-graphical-elements.",
    "title": "tidyverse for data analysis",
    "section": "Plots map data onto graphical elements.",
    "text": "Plots map data onto graphical elements.\n\n\n\njoined_data`\n\n\nod\nplate_id\nrow\ncolumn\nbug\ncondition\nconc\n\n\n\n\n0.206\n1\na\n1\nCTRL\nCTRL\n0\n\n\n0.171\n1\na\n2\ncrispatus\nCTRL\n0\n\n\n0.136\n1\na\n3\ncrispatus\nCTRL\n0\n\n\n0.131\n1\na\n4\ncrispatus\nCTRL\n0\n\n\n0.137\n1\na\n5\njensenii\nCTRL\n0\n\n\n0.140\n1\na\n6\njensenii\nCTRL\n0"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#od-mapped-to-y-position",
    "href": "materials/r-tutorial/slides.html#od-mapped-to-y-position",
    "title": "tidyverse for data analysis",
    "section": "od mapped to y position",
    "text": "od mapped to y position"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#conc-mapped-to-color",
    "href": "materials/r-tutorial/slides.html#conc-mapped-to-color",
    "title": "tidyverse for data analysis",
    "section": "conc mapped to color",
    "text": "conc mapped to color"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#commonly-used-aesthetics",
    "href": "materials/r-tutorial/slides.html#commonly-used-aesthetics",
    "title": "tidyverse for data analysis",
    "section": "Commonly used aesthetics",
    "text": "Commonly used aesthetics\n\nFigure from  Claus O. Wilke. Fundamentals of Data Visualization. O’Reilly, 2019"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#the-same-data-values-can-be-mapped-to-different-aesthetics",
    "href": "materials/r-tutorial/slides.html#the-same-data-values-can-be-mapped-to-different-aesthetics",
    "title": "tidyverse for data analysis",
    "section": "The same data values can be mapped to different aesthetics",
    "text": "The same data values can be mapped to different aesthetics\n\nFigure from  Claus O. Wilke. Fundamentals of Data Visualization. O’Reilly, 2019"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#we-can-use-many-different-aesthetics-at-once",
    "href": "materials/r-tutorial/slides.html#we-can-use-many-different-aesthetics-at-once",
    "title": "tidyverse for data analysis",
    "section": "We can use many different aesthetics at once",
    "text": "We can use many different aesthetics at once"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#we-define-the-mapping-with-aes",
    "href": "materials/r-tutorial/slides.html#we-define-the-mapping-with-aes",
    "title": "tidyverse for data analysis",
    "section": "We define the mapping with aes()",
    "text": "We define the mapping with aes()\n\n```{r}\njoined_data %&gt;%\n  ggplot(mapping = aes(x = conc, y = od, color = bug)) +\n  geom_jitter()\n```"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#the-geom-determines-how-the-data-is-shown",
    "href": "materials/r-tutorial/slides.html#the-geom-determines-how-the-data-is-shown",
    "title": "tidyverse for data analysis",
    "section": "The geom determines how the data is shown",
    "text": "The geom determines how the data is shown\n\n```{r}\nggplot(joined_data, mapping = aes(x = conc, y = od, color = bug)) +\n  geom_point()\n```"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#the-geom-determines-how-the-data-is-shown-1",
    "href": "materials/r-tutorial/slides.html#the-geom-determines-how-the-data-is-shown-1",
    "title": "tidyverse for data analysis",
    "section": "The geom determines how the data is shown",
    "text": "The geom determines how the data is shown\n\n```{r}\nggplot(joined_data, mapping = aes(x = as.factor(conc), y = od, color = bug)) +\n  geom_boxplot()\n```"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#the-geom-determines-how-the-data-is-shown-2",
    "href": "materials/r-tutorial/slides.html#the-geom-determines-how-the-data-is-shown-2",
    "title": "tidyverse for data analysis",
    "section": "The geom determines how the data is shown",
    "text": "The geom determines how the data is shown\n\n```{r}\njoined_data %&gt;%\n  ggplot(mapping = aes(x = conc, y = od, color = bug)) +\n  geom_jitter()\n```"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#different-geoms-have-parameters-for-control",
    "href": "materials/r-tutorial/slides.html#different-geoms-have-parameters-for-control",
    "title": "tidyverse for data analysis",
    "section": "Different geoms have parameters for control",
    "text": "Different geoms have parameters for control\n\n```{r}\njoined_data %&gt;%\n  ggplot(mapping = aes(x = conc, y = od, color = bug)) +\n  geom_jitter(size=3)\n```"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#different-geoms-have-parameters-for-control-1",
    "href": "materials/r-tutorial/slides.html#different-geoms-have-parameters-for-control-1",
    "title": "tidyverse for data analysis",
    "section": "Different geoms have parameters for control",
    "text": "Different geoms have parameters for control\n\n```{r}\njoined_data %&gt;%\n  ggplot(mapping = aes(x = conc, y = od, color = bug)) +\n  geom_jitter(size=3, width=10)\n```"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#aesthetics-can-also-be-used-as-parameters-in-geoms",
    "href": "materials/r-tutorial/slides.html#aesthetics-can-also-be-used-as-parameters-in-geoms",
    "title": "tidyverse for data analysis",
    "section": "Aesthetics can also be used as parameters in geoms",
    "text": "Aesthetics can also be used as parameters in geoms\n\n\n```{r}\n#| output-location: column\nggplot(joined_data, mapping = aes(x = as.factor(conc), y = od, color = bug)) +\n  geom_boxplot(fill=\"orange\")\n```"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#faceting-makes-subplots-for-comparisons.",
    "href": "materials/r-tutorial/slides.html#faceting-makes-subplots-for-comparisons.",
    "title": "tidyverse for data analysis",
    "section": "Faceting makes subplots for comparisons.",
    "text": "Faceting makes subplots for comparisons.\n\n```{r}\njoined_data %&gt;%\n  ggplot(mapping = aes(x = conc, y = od, color = bug)) +\n  geom_jitter(size=3, width=10) +\n  facet_wrap(~condition)\n```"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#faceting-makes-subplots-for-comparisons.-1",
    "href": "materials/r-tutorial/slides.html#faceting-makes-subplots-for-comparisons.-1",
    "title": "tidyverse for data analysis",
    "section": "Faceting makes subplots for comparisons.",
    "text": "Faceting makes subplots for comparisons.\n\n```{r}\njoined_data %&gt;%\n  ggplot(mapping = aes(x = conc, y = od, color = bug)) +\n  geom_jitter(size=3, width=10) +\n  facet_wrap(~condition+bug, ncol=6)\n```"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#histograms-and-density-plots",
    "href": "materials/r-tutorial/slides.html#histograms-and-density-plots",
    "title": "tidyverse for data analysis",
    "section": "Histograms and density plots",
    "text": "Histograms and density plots\n\n\n\n\n\n\n\nage\nsex\nclass\nsurvived\n\n\n\n\n0.17\nfemale\n3rd\nsurvived\n\n\n0.33\nmale\n3rd\ndied\n\n\n0.80\nmale\n2nd\nsurvived\n\n\n0.83\nmale\n2nd\nsurvived\n\n\n0.83\nmale\n3rd\nsurvived\n\n\n0.92\nmale\n1st\nsurvived\n\n\n1.00\nfemale\n2nd\nsurvived\n\n\n1.00\nfemale\n3rd\nsurvived\n\n\n1.00\nmale\n2nd\nsurvived\n\n\n1.00\nmale\n2nd\nsurvived\n\n\n1.00\nmale\n3rd\nsurvived\n\n\n1.50\nfemale\n3rd\ndied\n\n\n\n\n\n\n\n\n\n\n\nage\nsex\nclass\nsurvived\n\n\n\n\n1.5\nfemale\n3rd\ndied\n\n\n2.0\nfemale\n1st\ndied\n\n\n2.0\nfemale\n2nd\nsurvived\n\n\n2.0\nfemale\n3rd\ndied\n\n\n2.0\nfemale\n3rd\ndied\n\n\n2.0\nmale\n2nd\nsurvived\n\n\n2.0\nmale\n2nd\nsurvived\n\n\n2.0\nmale\n2nd\nsurvived\n\n\n3.0\nfemale\n2nd\nsurvived\n\n\n3.0\nfemale\n3rd\nsurvived\n\n\n3.0\nmale\n2nd\nsurvived\n\n\n3.0\nmale\n2nd\nsurvived\n\n\n\n\n\n\n\n\n\n\n\nage\nsex\nclass\nsurvived\n\n\n\n\n3\nmale\n3rd\nsurvived\n\n\n3\nmale\n3rd\nsurvived\n\n\n4\nfemale\n2nd\nsurvived\n\n\n4\nfemale\n2nd\nsurvived\n\n\n4\nfemale\n3rd\nsurvived\n\n\n4\nfemale\n3rd\nsurvived\n\n\n4\nmale\n1st\nsurvived\n\n\n4\nmale\n3rd\ndied\n\n\n4\nmale\n3rd\nsurvived\n\n\n5\nfemale\n3rd\nsurvived\n\n\n5\nfemale\n3rd\nsurvived\n\n\n5\nmale\n3rd\ndied"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#histograms-depend-on-the-chosen-bin-width",
    "href": "materials/r-tutorial/slides.html#histograms-depend-on-the-chosen-bin-width",
    "title": "tidyverse for data analysis",
    "section": "Histograms depend on the chosen bin width",
    "text": "Histograms depend on the chosen bin width"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#making-histograms-with-ggplot-geom_histogram",
    "href": "materials/r-tutorial/slides.html#making-histograms-with-ggplot-geom_histogram",
    "title": "tidyverse for data analysis",
    "section": "Making histograms with ggplot: geom_histogram()",
    "text": "Making histograms with ggplot: geom_histogram()\n\n```{r}\nggplot(titanic, aes(age)) +\n  geom_histogram()\n```"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#setting-the-bin-width",
    "href": "materials/r-tutorial/slides.html#setting-the-bin-width",
    "title": "tidyverse for data analysis",
    "section": "Setting the bin width",
    "text": "Setting the bin width\n\n```{r}\nggplot(titanic, aes(age)) +\n  geom_histogram(binwidth = 5)\n```\n\n\n\nDo you like where there bins are? What does the first bin say?"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#always-set-the-center-as-well-to-half-the-bin_width",
    "href": "materials/r-tutorial/slides.html#always-set-the-center-as-well-to-half-the-bin_width",
    "title": "tidyverse for data analysis",
    "section": "Always set the center as well, to half the bin_width",
    "text": "Always set the center as well, to half the bin_width\n\n```{r}\nggplot(titanic, aes(age)) +\n  geom_histogram(binwidth = 5, center=2.5)\n```\n\n\n\nSetting center 2.5 makes the bars start 0-5, 5-10, etc. instead of 2.5-7.5, etc. You could instead use the argument boundary=5 to accomplish the same behavior."
  },
  {
    "objectID": "materials/r-tutorial/slides.html#making-density-plots-with-ggplot-geom_density",
    "href": "materials/r-tutorial/slides.html#making-density-plots-with-ggplot-geom_density",
    "title": "tidyverse for data analysis",
    "section": "Making density plots with ggplot: geom_density()",
    "text": "Making density plots with ggplot: geom_density()\n\n```{r}\nggplot(titanic, aes(age)) +\n  geom_density(fill = \"skyblue\")\n```"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#making-density-plots-with-ggplot-geom_density-1",
    "href": "materials/r-tutorial/slides.html#making-density-plots-with-ggplot-geom_density-1",
    "title": "tidyverse for data analysis",
    "section": "Making density plots with ggplot: geom_density()",
    "text": "Making density plots with ggplot: geom_density()\n\n```{r}\nggplot(titanic, aes(age)) +\n  geom_density()\n```\n\n\nwithout fill"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#boxplots-showing-values-along-y-conditions-along-x",
    "href": "materials/r-tutorial/slides.html#boxplots-showing-values-along-y-conditions-along-x",
    "title": "tidyverse for data analysis",
    "section": "Boxplots: Showing values along y, conditions along x",
    "text": "Boxplots: Showing values along y, conditions along x\n\nA boxplot is a crude way of visualizing a distribution."
  },
  {
    "objectID": "materials/r-tutorial/slides.html#how-to-read-a-boxplot",
    "href": "materials/r-tutorial/slides.html#how-to-read-a-boxplot",
    "title": "tidyverse for data analysis",
    "section": "How to read a boxplot",
    "text": "How to read a boxplot"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#if-you-like-density-plots-consider-violins",
    "href": "materials/r-tutorial/slides.html#if-you-like-density-plots-consider-violins",
    "title": "tidyverse for data analysis",
    "section": "If you like density plots, consider violins",
    "text": "If you like density plots, consider violins\n\n\nA violin plot is a density plot rotated 90 degrees and then mirrored."
  },
  {
    "objectID": "materials/r-tutorial/slides.html#how-to-read-a-violin-plot",
    "href": "materials/r-tutorial/slides.html#how-to-read-a-violin-plot",
    "title": "tidyverse for data analysis",
    "section": "How to read a violin plot",
    "text": "How to read a violin plot"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#making-boxplots-violins-etc.-in-ggplot2-1",
    "href": "materials/r-tutorial/slides.html#making-boxplots-violins-etc.-in-ggplot2-1",
    "title": "tidyverse for data analysis",
    "section": "Making boxplots, violins, etc. in ggplot2",
    "text": "Making boxplots, violins, etc. in ggplot2\n\n\n\n\n\n\n\n\nPlot type\nGeom\nNotes\n\n\n\n\nboxplot\ngeom_boxplot()\n\n\n\nviolin plot\ngeom_violin()\n\n\n\nstrip chart\ngeom_point()\nJittering requires position_jitter()\n\n\nsina plot\ngeom_sina()\nFrom package ggforce\n\n\nscatter-density plot\ngeom_quasirandom()\nFrom package ggbeeswarm\n\n\nridgeline\ngeom_density_ridges()\nFrom package ggridges"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#examples-boxplot",
    "href": "materials/r-tutorial/slides.html#examples-boxplot",
    "title": "tidyverse for data analysis",
    "section": "Examples: Boxplot",
    "text": "Examples: Boxplot\n\n```{r}\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_boxplot(fill = \"skyblue\") \n```"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#examples-violins",
    "href": "materials/r-tutorial/slides.html#examples-violins",
    "title": "tidyverse for data analysis",
    "section": "Examples: Violins",
    "text": "Examples: Violins\n\n```{r}\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_violin(fill = \"skyblue\") \n```"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#examples-strip-chart-no-jitter",
    "href": "materials/r-tutorial/slides.html#examples-strip-chart-no-jitter",
    "title": "tidyverse for data analysis",
    "section": "Examples: Strip chart (no jitter)",
    "text": "Examples: Strip chart (no jitter)\n\n```{r}\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  geom_point(color = \"skyblue\") \n```"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#examples-ggbeeswarms-geom_quasirandom",
    "href": "materials/r-tutorial/slides.html#examples-ggbeeswarms-geom_quasirandom",
    "title": "tidyverse for data analysis",
    "section": "Examples: ggbeeswarm’s geom_quasirandom",
    "text": "Examples: ggbeeswarm’s geom_quasirandom\n\n```{r}\nggplot(lincoln_temps, aes(x = month, y = mean_temp)) +\n  ggbeeswarm::geom_quasirandom(color = \"skyblue\") \n```"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#group-pen-and-paper-exercise",
    "href": "materials/r-tutorial/slides.html#group-pen-and-paper-exercise",
    "title": "tidyverse for data analysis",
    "section": "Group Pen and Paper exercise",
    "text": "Group Pen and Paper exercise\n\n\n\n−+\n10:00\n\n\n\nGet with a group of 2-3 people. Go to the activity and pick an option to do together."
  },
  {
    "objectID": "materials/r-tutorial/slides.html#analyze-subsets-group_by-and-summarize",
    "href": "materials/r-tutorial/slides.html#analyze-subsets-group_by-and-summarize",
    "title": "tidyverse for data analysis",
    "section": "Analyze subsets: group_by() and summarize()",
    "text": "Analyze subsets: group_by() and summarize()"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#example-application-of-grouping-counting",
    "href": "materials/r-tutorial/slides.html#example-application-of-grouping-counting",
    "title": "tidyverse for data analysis",
    "section": "Example application of grouping: Counting",
    "text": "Example application of grouping: Counting\nPreviously we used count, now we group the data\n\n```{r}\njoined_data %&gt;%\n  group_by(bug, conc, condition)\n```\n\n# A tibble: 384 × 7\n# Groups:   bug, conc, condition [91]\n      od plate_id row   column bug       condition  conc\n   &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;\n 1 0.206        1 a          1 CTRL      CTRL          0\n 2 0.171        1 a          2 crispatus CTRL          0\n 3 0.136        1 a          3 crispatus CTRL          0\n 4 0.131        1 a          4 crispatus CTRL          0\n 5 0.137        1 a          5 jensenii  CTRL          0\n 6 0.14         1 a          6 jensenii  CTRL          0\n 7 0.144        1 a          7 jensenii  CTRL          0\n 8 0.126        1 a          8 iners     CTRL          0\n 9 0.13         1 a          9 iners     CTRL          0\n10 0.127        1 a         10 iners     CTRL          0\n# ℹ 374 more rows"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#example-application-of-grouping-counting-1",
    "href": "materials/r-tutorial/slides.html#example-application-of-grouping-counting-1",
    "title": "tidyverse for data analysis",
    "section": "Example application of grouping: Counting",
    "text": "Example application of grouping: Counting\nPreviously we used count, now we group the data, and then summarise\n\n```{r}\njoined_data %&gt;%\n  group_by(bug, conc, condition) %&gt;%\n  summarise(\n    n = n() # n() returns the number of observations per group\n    )\n```\n\n# A tibble: 91 × 4\n# Groups:   bug, conc [35]\n   bug    conc condition     n\n   &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;     &lt;int&gt;\n 1 CTRL      0 CTRL         24\n 2 CTRL     50 LNA           6\n 3 CTRL     50 OA            6\n 4 CTRL     50 VCA           6\n 5 CTRL    100 LNA           6\n 6 CTRL    100 OA            6\n 7 CTRL    100 VCA           6\n 8 CTRL    200 LNA           6\n 9 CTRL    200 OA            6\n10 CTRL    200 VCA           6\n# ℹ 81 more rows"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#example-application-of-grouping-medians",
    "href": "materials/r-tutorial/slides.html#example-application-of-grouping-medians",
    "title": "tidyverse for data analysis",
    "section": "Example application of grouping: Medians",
    "text": "Example application of grouping: Medians\n\n```{r}\njoined_data %&gt;%\n  group_by(bug, conc, condition) %&gt;%\n  summarise(\n    median_od = median(od) \n    )\n```\n\n# A tibble: 91 × 4\n# Groups:   bug, conc [35]\n   bug    conc condition median_od\n   &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt;\n 1 CTRL      0 CTRL          0.117\n 2 CTRL     50 LNA           0.118\n 3 CTRL     50 OA            0.118\n 4 CTRL     50 VCA           0.119\n 5 CTRL    100 LNA           0.120\n 6 CTRL    100 OA            0.118\n 7 CTRL    100 VCA           0.119\n 8 CTRL    200 LNA           0.122\n 9 CTRL    200 OA            0.122\n10 CTRL    200 VCA           0.122\n# ℹ 81 more rows"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#you-can-make-multiple-summaries-at-once",
    "href": "materials/r-tutorial/slides.html#you-can-make-multiple-summaries-at-once",
    "title": "tidyverse for data analysis",
    "section": "You can make multiple summaries at once",
    "text": "You can make multiple summaries at once\n\n```{r}\njoined_data %&gt;%\n  group_by(bug, conc, condition) %&gt;%\n  summarise(\n    n = n(), \n    median_od = median(od) \n    )\n```\n\n# A tibble: 91 × 5\n# Groups:   bug, conc [35]\n   bug    conc condition     n median_od\n   &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;     &lt;int&gt;     &lt;dbl&gt;\n 1 CTRL      0 CTRL         24     0.117\n 2 CTRL     50 LNA           6     0.118\n 3 CTRL     50 OA            6     0.118\n 4 CTRL     50 VCA           6     0.119\n 5 CTRL    100 LNA           6     0.120\n 6 CTRL    100 OA            6     0.118\n 7 CTRL    100 VCA           6     0.119\n 8 CTRL    200 LNA           6     0.122\n 9 CTRL    200 OA            6     0.122\n10 CTRL    200 VCA           6     0.122\n# ℹ 81 more rows"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#get-background-od-for-each-media-on-each-plate",
    "href": "materials/r-tutorial/slides.html#get-background-od-for-each-media-on-each-plate",
    "title": "tidyverse for data analysis",
    "section": "Get background OD for each media on each plate",
    "text": "Get background OD for each media on each plate\nMake a code block and make a variable called media_background_medians that has one row for every combination of plate, lcfa, and conc that gives the median OD measured for those conditions.\nBonus: make a histogram of the media backgrounds (before summarising) for each condition and concentration. Try with a facet by plate and without."
  },
  {
    "objectID": "materials/r-tutorial/slides.html#get-no-lcfa-od-for-each-bug-on-each-plate",
    "href": "materials/r-tutorial/slides.html#get-no-lcfa-od-for-each-bug-on-each-plate",
    "title": "tidyverse for data analysis",
    "section": "Get no-LCFA OD for each bug on each plate",
    "text": "Get no-LCFA OD for each bug on each plate\nNow make a variable called bug_no_lcfa_control. Join the media_background_medians to the joined_data, and mutate a column that caluclate the od - media_background. Filter this table so it only has the no LCFA control conditions for each bug on each plate. Then group_by bug and plate_id and get the median of each background subtracted od.\nBonus: make a histogram before summarising of the ods with background subtracted for each bug on each plate."
  },
  {
    "objectID": "materials/r-tutorial/slides.html#challenge-calculate-relative-growths",
    "href": "materials/r-tutorial/slides.html#challenge-calculate-relative-growths",
    "title": "tidyverse for data analysis",
    "section": "Challenge: calculate relative growths",
    "text": "Challenge: calculate relative growths\nMake a table that has the relative growth compared to no LCFA of each bug for each concentration. (Hint: There should be three rows per condition+bug+concentration.) Make a plot showing the relative growths. (e.g. x axis is concentration, y axis relative growth, facet by bug+concentration, and pick a geom to use to show the data.)\nInvestigate why some relative growths are so high. Think about how you might tweak the analysis to handle that issue."
  },
  {
    "objectID": "materials/r-tutorial/slides.html#reshape-pivot_wider-and-pivot_longer",
    "href": "materials/r-tutorial/slides.html#reshape-pivot_wider-and-pivot_longer",
    "title": "tidyverse for data analysis",
    "section": "Reshape: pivot_wider() and pivot_longer()",
    "text": "Reshape: pivot_wider() and pivot_longer()"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#reshaping-example-making-a-wide-summary-table",
    "href": "materials/r-tutorial/slides.html#reshaping-example-making-a-wide-summary-table",
    "title": "tidyverse for data analysis",
    "section": "Reshaping example: Making a wide summary table",
    "text": "Reshaping example: Making a wide summary table\n\n```{r}\njoined_data %&gt;%\n  count(plate_id, bug, conc, condition) %&gt;%\n  pivot_wider(names_from = plate_id, values_from = n)\n```\n\n# A tibble: 91 × 7\n   bug        conc condition   `1`   `2`   `3`   `4`\n   &lt;chr&gt;     &lt;dbl&gt; &lt;chr&gt;     &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1 CTRL          0 CTRL          6     6     6     6\n 2 CTRL         50 OA            3    NA     3    NA\n 3 CTRL        100 OA            3    NA     3    NA\n 4 CTRL        200 OA            3    NA     3    NA\n 5 CTRL        200 VCA           3    NA     3    NA\n 6 CTRL        400 OA            3    NA     3    NA\n 7 CTRL        400 VCA           3    NA     3    NA\n 8 crispatus     0 CTRL          6     6    NA    NA\n 9 crispatus    50 OA            3    NA    NA    NA\n10 crispatus   100 OA            3    NA    NA    NA\n# ℹ 81 more rows"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#reshaping-example-making-a-wide-summary-table-1",
    "href": "materials/r-tutorial/slides.html#reshaping-example-making-a-wide-summary-table-1",
    "title": "tidyverse for data analysis",
    "section": "Reshaping example: Making a wide summary table",
    "text": "Reshaping example: Making a wide summary table\n\n```{r}\njoined_data %&gt;%\n  count(plate_id, bug, conc, condition) %&gt;%\n  pivot_wider(names_from = bug, values_from = n)\n```\n\n# A tibble: 28 × 10\n   plate_id  conc condition  CTRL crispatus iners jensenii gasseri piotii\n      &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;     &lt;int&gt;     &lt;int&gt; &lt;int&gt;    &lt;int&gt;   &lt;int&gt;  &lt;int&gt;\n 1        1     0 CTRL          6         6     6        6      NA     NA\n 2        1    50 OA            3         3     3        3      NA     NA\n 3        1   100 OA            3         3     3        3      NA     NA\n 4        1   200 OA            3         3     3        3      NA     NA\n 5        1   200 VCA           3         3     3        3      NA     NA\n 6        1   400 OA            3         3     3        3      NA     NA\n 7        1   400 VCA           3         3     3        3      NA     NA\n 8        2     0 CTRL          6         6     6        6      NA     NA\n 9        2    50 LNA           3         3     3        3      NA     NA\n10        2    50 VCA           3         3     3        3      NA     NA\n# ℹ 18 more rows\n# ℹ 1 more variable: vaginalis &lt;int&gt;"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#we-use-joins-to-add-columns-from-one-table-into-another",
    "href": "materials/r-tutorial/slides.html#we-use-joins-to-add-columns-from-one-table-into-another",
    "title": "tidyverse for data analysis",
    "section": "We use joins to add columns from one table into another",
    "text": "We use joins to add columns from one table into another"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#there-are-different-types-of-joins",
    "href": "materials/r-tutorial/slides.html#there-are-different-types-of-joins",
    "title": "tidyverse for data analysis",
    "section": "There are different types of joins",
    "text": "There are different types of joins\nThe differences are all about how to handle when the two tables have different key values\n\n\n\nleft_join() - the resulting table always has the same key_values as the “left” table\nright_join() - the resulting table always has the same key_values as the “right” table\ninner_join() - the resulting table always only keeps the key_values that are in both tables\nfull_join() - the resulting table always has all key_values found in both tables"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#left-join",
    "href": "materials/r-tutorial/slides.html#left-join",
    "title": "tidyverse for data analysis",
    "section": "Left Join",
    "text": "Left Join\nleft_join() - the resulting table always has the same key_values as the “left” table"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#inner_join",
    "href": "materials/r-tutorial/slides.html#inner_join",
    "title": "tidyverse for data analysis",
    "section": "inner_join",
    "text": "inner_join\ninner_join() - the resulting table always only keeps the key_values that are in both tables\n\n\ntable_a %&gt;% inner_join(table_b)"
  },
  {
    "objectID": "materials/r-tutorial/slides.html#note-merging-tables-vertically-is-bind_rows-not-a-join",
    "href": "materials/r-tutorial/slides.html#note-merging-tables-vertically-is-bind_rows-not-a-join",
    "title": "tidyverse for data analysis",
    "section": "Note, merging tables vertically is bind_rows(), not a join",
    "text": "Note, merging tables vertically is bind_rows(), not a join\n\n\ntable_a %&gt;% bind_rows(table_b)\n\n\n\n\nback to module"
  },
  {
    "objectID": "materials/r-tutorial/images/ex-2.html",
    "href": "materials/r-tutorial/images/ex-2.html",
    "title": "Kwon Lab Pipelines",
    "section": "",
    "text": "Spatial Logical Toy Inventor: Erno Rubik Assignee: Politoys Ipari Szovetkezet, Budapest, Hungary The first patent by the inventor is registered in Hungary. Appl. No.: 289,192 Filed: Aug. 3, 1981 Background of the Invention The invention relates to a spatial logical toy having a total of eighteen toy elements which form a regular or an irregular spatial body, preferably an oblong body, in the assembled state. Spatial logical toys are well known, such as that described in the HU-PS No. 170 062 of the same applicant, which relates to a spatial logical toy consisting of twenty-seven solids which form a cube in the assembled state. The toy elements, in the shape of small cubes, may be turned along the spatial axes of the cube by means of connecting elements arranged in the geometric center of the large cube. The surfaces of the small cubes forming each surface of the large cube are colored or carry numbers, figures or any other symbols which can be assembled into the predetermined logical order of sequence by simultaneously rotating the nine toy elements forming the surfaces of the large cube. Summary of the Invention The logical toy according to the present invention represents an improved form of the previously described spatial logical toy. The construction is based on the same principles, however, the internal connection is performed by means of absolutely new and particular solids. The key feature according to the invention, i.e. shape, name, sounds, mode of interconnection and central fixture will be described in detail by means of two preferred embodiments, by the aid of the accompanying drawings, wherein. Component blocks of the spatial logial toy. ex-2-figs.png What is claimed is: 1. In a spatial logical toy assembled from a plurality of toy elements, of which a predetermined number may be rotated in the direction of the spatial axes starting from the geometrical center of the logical toy, the improvement wherein the spatial logical toy is formed by a total of eighteen toy elements. Two sets of eight toy elements each comprise substantially cubiforms with integally formed cam elements and each of the sets comprise eight identical toy elements, and two connecting toy elements, and means for joining the connecting toy elements to coact with the cam elements to form an integrated toy body, the joining means comprising a single screw enclosed by a spring. The spatial logical toy as claimed in claim 1, wherein the toy has the shape of a regular geometrical body in the assembled state. The toy elements thereof belonging to one set comprise eight cubiform homologous elements each having a first cam element connected to one corner thereof. Two confining surfaces of which lie at a unit distance from two surfaces of the cube and are parallel therewith and are cut-off in the form of an ellipsis-quarter, and a third confining surface thereof is coplanar with another surface of the cube and between the two confining faces of the first cam element running parallel with the cube and the cube there is a hollow with a convex spherical surface."
  },
  {
    "objectID": "materials/metagenomics/background/index.html",
    "href": "materials/metagenomics/background/index.html",
    "title": "Shotgun Metagenomics Background",
    "section": "",
    "text": "Shotgun metagenomics allows us to examine both the taxonomic composition and functional potential of microbial communities. Unlike 16S rRNA sequencing which only captures bacterial diversity at the species or genus level, shotgun metagenomics can detect bacteria, viruses, fungi, and other microorganisms (assuming your extraction is optimized for these different taxa), while also allowing analysis of the gene content of the different taxa for studying functional potential or strain-level diversity.",
    "crumbs": [
      "About the Kwon Lab",
      "Metagenomics",
      "Background"
    ]
  },
  {
    "objectID": "materials/metagenomics/background/index.html#overview",
    "href": "materials/metagenomics/background/index.html#overview",
    "title": "Shotgun Metagenomics Background",
    "section": "",
    "text": "Shotgun metagenomics allows us to examine both the taxonomic composition and functional potential of microbial communities. Unlike 16S rRNA sequencing which only captures bacterial diversity at the species or genus level, shotgun metagenomics can detect bacteria, viruses, fungi, and other microorganisms (assuming your extraction is optimized for these different taxa), while also allowing analysis of the gene content of the different taxa for studying functional potential or strain-level diversity.",
    "crumbs": [
      "About the Kwon Lab",
      "Metagenomics",
      "Background"
    ]
  },
  {
    "objectID": "materials/metagenomics/background/index.html#sample-collection-and-processing",
    "href": "materials/metagenomics/background/index.html#sample-collection-and-processing",
    "title": "Shotgun Metagenomics Background",
    "section": "Sample Collection and Processing",
    "text": "Sample Collection and Processing\n\nBiological Sampling\nSamples are typically collected as vaginal or cervical swabs. For downstream flexibility with timing and types of sequencing, you should use a product like RNAlater at the time of sampling.\n\n\nDNA Extraction and Sequencing\nAfter collection, samples undergo: 1. Nucleic acid extraction 2. Library preparation 3. Illumina sequencing - Target: 50+ million paired-end reads per sample - Read length: 2x150 base pairs\n\n\n\n\n\n\nNote\n\n\n\nDeep sequencing (50+ million reads) is necessary (especially for aasembly and strain-level analysis) because a significant portion of reads will be human in origin and will be filtered out during analysis.",
    "crumbs": [
      "About the Kwon Lab",
      "Metagenomics",
      "Background"
    ]
  },
  {
    "objectID": "materials/metagenomics/background/index.html#initial-processing",
    "href": "materials/metagenomics/background/index.html#initial-processing",
    "title": "Shotgun Metagenomics Background",
    "section": "Initial Processing",
    "text": "Initial Processing\nAll analysis pipelines begin with these essential steps: 1. Human read removal 2. Adapter trimming 3. Quality filtering",
    "crumbs": [
      "About the Kwon Lab",
      "Metagenomics",
      "Background"
    ]
  },
  {
    "objectID": "materials/metagenomics/background/index.html#downstream-analysis",
    "href": "materials/metagenomics/background/index.html#downstream-analysis",
    "title": "Shotgun Metagenomics Background",
    "section": "Downstream Analysis",
    "text": "Downstream Analysis\nAfter initial processing, there are several approaches you can take depending on your research questions:\n\n1. Gene-centric Analysis (VIRGO2)\n\nVIRGO2 Pipeline for gene-centric analysis\nMaps reads to a curated vaginal gene catalog\nUseful for:\n\nGene-level abundance\nTaxonomic composition\nFunctional annotations\n\n\n\n\n2. Genome Assembly (MAGs)\n\nMAG Assembly Pipeline (Coming Soon)\nAssembles reads into contigs\nBins contigs into Metagenome-Assembled Genomes (MAGs)\nUseful for:\n\nUnderstanding genome structure\nIdentifying new strains\nDiscovering novel organisms\n\n\n\n\n3. Strain-level Analysis\n\ninStrain:\n\nExamines within-species genetic diversity\nTracks strain populations\n\nStrainFacts:\n\nResolves strain-level variation\nIdentifies distinct strains within species",
    "crumbs": [
      "About the Kwon Lab",
      "Metagenomics",
      "Background"
    ]
  },
  {
    "objectID": "materials/getting-started/local_R/index.html",
    "href": "materials/getting-started/local_R/index.html",
    "title": "Installing R and RStudio",
    "section": "",
    "text": "adapted from datacarpentry.org\nThese instructions will help you install R and RStudio for your local computer, as well as several commonly used packages in the lab. You might have R installed already, but check the versions. Please make sure you have install R version 4.3.2 or later and RStudio version 2023.09.0 or later, but if you are installing for the first time just install the most recent versions available.",
    "crumbs": [
      "About the Kwon Lab",
      "R and R Studio",
      "</b> RStudio and recommended packages"
    ]
  },
  {
    "objectID": "materials/getting-started/local_R/index.html#step-1---follow-instructions-for-your-operating-system",
    "href": "materials/getting-started/local_R/index.html#step-1---follow-instructions-for-your-operating-system",
    "title": "Installing R and RStudio",
    "section": "1 Step 1 - follow instructions for your operating system",
    "text": "1 Step 1 - follow instructions for your operating system\n\n1.0.1 For Windows see Section 3\n\n\n1.0.2 For MacOS see Section 4\n\n\n1.0.3 For Linux see Section 5",
    "crumbs": [
      "About the Kwon Lab",
      "R and R Studio",
      "</b> RStudio and recommended packages"
    ]
  },
  {
    "objectID": "materials/getting-started/local_R/index.html#step-2---install-r-packages",
    "href": "materials/getting-started/local_R/index.html#step-2---install-r-packages",
    "title": "Installing R and RStudio",
    "section": "2 Step 2 - install R packages",
    "text": "2 Step 2 - install R packages\nOpen RStudio and Paste the following into your console on the left/bottom-left.\ninstall.packages(c( \"colorspace\",\"corncob\", \"cowplot\", \"DT\",  \"ggbeeswarm\", \"ggforce\",\"ggraph\",\"ggtext\", \"gtsummary\",\"knitr\", \"naniar\", \"margins\",  \"palmerpenguins\", \"patchwork\", \"quarto\",  \"rmarkdown\", \"tidyverse\"))\n\nif (!requireNamespace(\"BiocManager\", quietly = TRUE)) install.packages(\"BiocManager\")\nBiocManager::install(c(\"phyloseq\", \"microbiome\", \"ComplexHeatmap\",\"DESeq2\"), update = FALSE)\n\ninstall.packages(\n  \"microViz\",\n  repos = c(davidbarnett = \"https://david-barnett.r-universe.dev\", getOption(\"repos\"))\n)",
    "crumbs": [
      "About the Kwon Lab",
      "R and R Studio",
      "</b> RStudio and recommended packages"
    ]
  },
  {
    "objectID": "materials/getting-started/local_R/index.html#sec-windows",
    "href": "materials/getting-started/local_R/index.html#sec-windows",
    "title": "Installing R and RStudio",
    "section": "3 Windows",
    "text": "3 Windows\n\n3.1 If you don’t have R and RStudio installed:\nGo to https://posit.co/download/rstudio-desktop/ and follow this instruction for windows.\n\n\n3.2 If you already have R and RStudio installed, check to see if updates are available.\nRStudio: Open RStudio and click on Help &gt; Check for updates. If a new version is available, quit RStudio, and download the latest version.\nR: Upon starting RStudio, the version of R you are running will appear on the console. You can also type sessionInfo() in the console to display the version of R you are running. The CRAN website will tell you if there is a more recent version available. You can update R using the installr package, by running:\n# installr is for windows only!\nif( !(\"installr\" %in% installed.packages()) ){install.packages(\"installr\")} \n\ninstallr::updateR(TRUE)",
    "crumbs": [
      "About the Kwon Lab",
      "R and R Studio",
      "</b> RStudio and recommended packages"
    ]
  },
  {
    "objectID": "materials/getting-started/local_R/index.html#sec-mac",
    "href": "materials/getting-started/local_R/index.html#sec-mac",
    "title": "Installing R and RStudio",
    "section": "4 MacOs",
    "text": "4 MacOs\n\n4.1 Check your processor\nadapted from https://docs.cse.lehigh.edu/determine-mac-architecture/\nMake sure you are downloading and installing the right version of R and R Studio for your laptop’s CPU. Some older Macs (pre-2018) have an intel chip (also known as x64 or x86_64 architecture), while recent macs have M1,M2,M3, or M4 chips (also known as ARM architecture).\nTo determine whether a Mac is running an Intel Processor or Apple ARM M1 or M2, click on the  Apple Menu and select ‘About this Mac’:\n\n\n\nclick about this mac\n\n\nFrom the ‘About this Mac’ screen, on the ‘Overview’ tab, look for a line that indicates either ‘Chip’ or ‘Processor’. If the line contains M1 or M2, the machine is running Apple Silicon. Alternatively, the word Intel indicates that the machine is running an Intel-based Core series processor.\n\n\n\nM1 or M2\n\n\n\n\n\nintel\n\n\n\n\n4.2 If you don’t have R and RStudio installed:\nGo to https://posit.co/download/rstudio-desktop/ and follow this instruction for MacOS.\n\n\n4.3 If you already have R and RStudio installed, check to see if updates are available.\nRStudio: Open RStudio and click on Help &gt; Check for updates. If a new version is available, quit RStudio, and download the latest version.\nR: Upon starting RStudio, the version of R you are running will appear on the console. You can also type sessionInfo() to display the version of R you are running. The CRAN website will tell you if there is a more recent version available. For this workshop install version 4.3.1 of R",
    "crumbs": [
      "About the Kwon Lab",
      "R and R Studio",
      "</b> RStudio and recommended packages"
    ]
  },
  {
    "objectID": "materials/getting-started/local_R/index.html#sec-linux",
    "href": "materials/getting-started/local_R/index.html#sec-linux",
    "title": "Installing R and RStudio",
    "section": "5 Linux",
    "text": "5 Linux\n\n5.1 If you don’t have R and RStudio installed:\nGo to https://posit.co/download/rstudio-desktop/ and follow this instruction for your Linux OS.\n\n\n5.2 If you already have R and RStudio installed, check to see if updates are available.\nRStudio: Open RStudio and click on Help &gt; Check for updates. If a new version is available, quit RStudio, and download the latest version.\nR: Upon starting RStudio, the version of R you are running will appear on the console. You can also type sessionInfo() to display the version of R you are running. The CRAN website will tell you if there is a more recent version available. For this workshop install version 4.3.1 of R",
    "crumbs": [
      "About the Kwon Lab",
      "R and R Studio",
      "</b> RStudio and recommended packages"
    ]
  },
  {
    "objectID": "materials/16S/valencia/index.html",
    "href": "materials/16S/valencia/index.html",
    "title": "Generating CSTs with Valencia",
    "section": "",
    "text": "The goal of this tutorial is to show the current best-practice way to assign CSTs to your human cervicovaginal 16S data. This tutorial assumes you have a phyloseq object that contains the ASVs for your samples.\nValencia compares your 16S data to a set of curated centroid communities and determines which one each of your samples is closest to.",
    "crumbs": [
      "About the Kwon Lab",
      "16S",
      "Assigning CSTs with Valencia"
    ]
  },
  {
    "objectID": "materials/16S/valencia/index.html#introduction",
    "href": "materials/16S/valencia/index.html#introduction",
    "title": "Generating CSTs with Valencia",
    "section": "",
    "text": "The goal of this tutorial is to show the current best-practice way to assign CSTs to your human cervicovaginal 16S data. This tutorial assumes you have a phyloseq object that contains the ASVs for your samples.\nValencia compares your 16S data to a set of curated centroid communities and determines which one each of your samples is closest to.",
    "crumbs": [
      "About the Kwon Lab",
      "16S",
      "Assigning CSTs with Valencia"
    ]
  },
  {
    "objectID": "materials/16S/valencia/index.html#installation",
    "href": "materials/16S/valencia/index.html#installation",
    "title": "Generating CSTs with Valencia",
    "section": "Installation",
    "text": "Installation\n\nInstall R, RStudio\nFollow the instructions on the Durban workshop series website.\n\n\nInstall R dependencies\nAfter you’ve installed the packages on there, you can also install phyloseq and microViz:\n\ninstall.packages(c(\"tidyverse\", \"cowplot\", \"gtsummary\", \"ggdendro\", \"ggdist\", \"ggforce\",\"ggplot2movies\", \"ggrepel\", \"ggridges\", \"ggthemes\", \"colorspace\", \"patchwork\", \"quarto\"))\n\n\nif (!requireNamespace(\"BiocManager\", quietly = TRUE)) install.packages(\"BiocManager\")\nBiocManager::install(c(\"phyloseq\", \"microbiome\", \"ComplexHeatmap\"), update = FALSE)\n\ninstall.packages(\n  \"microViz\",\n  repos = c(davidbarnett = \"https://david-barnett.r-universe.dev\", getOption(\"repos\"))\n)\n\n\n\nInstall conda for package management\nCheck if you have conda installed:\n\nOpen a terminal\nType which conda\nIf it says conda not found or nothing shows up, run the following:\n\n\ncd ~;\ncurl -L -O \"https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-$(uname)-$(uname -m).sh\";\nbash Mambaforge-$(uname)-$(uname -m).sh;\n\n\nWhen prompted agree to the lisence with yes and ask it to add itself to your shell startup with yes.\nClose and reopen your terminal.\n\nIf you conda is already installed, run the following to ensure you have the most recent version:\n\nconda update conda && conda install mamba -n base -c conda-forge\n\n\n\nInstall SpeciateIT and Valencia\nMake a new conda environment for these pieces of software:\n\nmamba create -n speciateit_valencia -c conda-forge python pandas\n\nThen, follow the instructions on https://github.com/ravel-lab/speciateIT/ to install. Make note of the location where you put the speciateIT folder.\nTo install Valencia, download the script by going here , then right click, Save As, and save where you want. This version of the script is from Michael France as of June 2024 and as of that time was the correct way to run Valencia.",
    "crumbs": [
      "About the Kwon Lab",
      "16S",
      "Assigning CSTs with Valencia"
    ]
  },
  {
    "objectID": "materials/16S/valencia/index.html#running-the-steps",
    "href": "materials/16S/valencia/index.html#running-the-steps",
    "title": "Generating CSTs with Valencia",
    "section": "Running the steps",
    "text": "Running the steps\nPhew, we’ve installed everything. Now we can run the next steps.",
    "crumbs": [
      "About the Kwon Lab",
      "16S",
      "Assigning CSTs with Valencia"
    ]
  },
  {
    "objectID": "materials/16S/valencia/index.html#get-your-asvs-and-count-table-from-your-phyloseq-object",
    "href": "materials/16S/valencia/index.html#get-your-asvs-and-count-table-from-your-phyloseq-object",
    "title": "Generating CSTs with Valencia",
    "section": "Get your ASVs and count table from your phyloseq object",
    "text": "Get your ASVs and count table from your phyloseq object\n\nFirst, make a new RStudio project in a new folder. (instructions here if you need them)\nDownload the example phyloseq and put it in the new project folder you just created. Download from here\nOpen up a new quarto document, and make a code chunk for the following code.\nThe following code reads in your phyloseq object, and writes out two files:\n\na fasta file containing your ASVs\na count table with samples as rows and ASVs as columns.\n\n\nBoth these files are required for CST assignment.\n\nlibrary(tidyverse)\nlibrary(phyloseq)\nlibrary(microViz)\n\nps &lt;- readRDS(\"example_phyloseq.RDS\") \n\nasvs_to_write &lt;- tibble(asv=microViz::otu_get(ps) %&gt;% colnames()) %&gt;% mutate(fasta_id=str_c(\"&gt;\",asv, \"\\n\")) %&gt;% mutate(asv = str_c(asv, \"\\n\"))\n\nasvs_to_write %&gt;%\n  mutate(line_to_write=map2_chr(fasta_id, asv, str_c)) %&gt;%\n  pull(line_to_write) %&gt;%\n  reduce(str_c) %&gt;%\n  write_file(\"asvs.fa\")\n\nps %&gt;%\n  otu_get() %&gt;%\n  as.data.frame() %&gt;%\n  write.csv(\"count_table.csv\") # using base R write.csv since we need the rownames\n\n\nRun SpeciateIT and Valencia\nFirst, run SpeciateIT’s classify program, which takes the asv fasta file as input. Replace the path to the database with the correct path for your computer. Make sure the database is using the correct region corresponding to your 16S amplicon (for the typical Kwon lab workflow use the “V4V4” databse, although newer data will start to be “V3V4”)\n\nconda activate speciateit_valencia\n\nclassify -d ~/dev/speciateIT-master/vSpeciateDB_models/vSpeciateIT_V4V4 \\\n  -i asvs.fa \\\n  -o speciateit_output\n\nThen, take the output from classify and your count table and use it to prepare the input for Valencia. Make sure to replace the path to count_table.py so it is correct for your system:\n\npython ~/dev/speciateIT-master/bin/count_table.py \\\n  -c count_table.csv \\\n  -s speciateit_output/MC_order7_results.txt\n\nNow run Valencia. The CST centroids file should be from the SpeciateIT github repository download here for convenience, and the Valencia python script should be downloaded from here (which you may have already done in the installation section above).\n\npython Valencia_v1.1.py \\\n  -ref VALENCIA2_CST_centroids_20Mar2024.csv \\\n  -i count_table_speciateIT.csv \\\n  -o cst_assignments\n\n\n\nAdd CSTs back to phyloseq object\nNow we have CST assignments for each sample. We need to add it back to the phyloseq object so we can use them in R.\nWe’ll use ps_join() from the microViz package to add the CSTs back to the phyloseq object\n\ncst_assignments &lt;- read_csv(\"cst_assignments.csv\")\n\nps_with_csts &lt;- ps_join(ps, match_sample_names = \"sampleID\",\n  cst_assignments %&gt;% select(sampleID, CST, subCST, score))\n\nps_with_csts %&gt;%\n tax_transform(rank = \"unique\", trans = \"compositional\") %&gt;%\n dist_calc(dist = \"bray\") %&gt;%\n ord_calc(\n  method = \"auto\"\n ) %&gt;% \n ord_plot(\n  axes = c(1, 2),\n  colour = \"subCST\", fill = \"subCST\",\n  shape = \"circle\", alpha = \"score\",\n  size = 2\n )\n\nTo save your phyloseq object with the added CSTs, run the following:\n\nps_with_csts %&gt;% saveRDS(\"phyloseq_object_with_csts.RDS\")\n\nThis code will be useful for exploring the phyloseq object interactively.\n\nps_with_csts %&gt;% ord_explore()",
    "crumbs": [
      "About the Kwon Lab",
      "16S",
      "Assigning CSTs with Valencia"
    ]
  },
  {
    "objectID": "materials/16S/16s_pipeline/index.html",
    "href": "materials/16S/16s_pipeline/index.html",
    "title": "16S Pipeline Tutorial",
    "section": "",
    "text": "A Snakemake workflow for processing 16S rRNA sequencing data using DADA2, VALENCIA for community state type (CST) classification, and custom scripts for spike-in adjustments.\nThis workflow assumes your reads are demultiplexed.",
    "crumbs": [
      "About the Kwon Lab",
      "16S",
      "16S Pipeline"
    ]
  },
  {
    "objectID": "materials/16S/16s_pipeline/index.html#prerequisites",
    "href": "materials/16S/16s_pipeline/index.html#prerequisites",
    "title": "16S Pipeline Tutorial",
    "section": "Prerequisites",
    "text": "Prerequisites\n\nRequired Software:\n\nSnakemake (v8.20 or higher)\nConda or Mamba\nPython 3.10 or higher\nR 4.3 or higher\n\nRequired Databases:\n\nHISAT2 human reference database\nGTDB reference databases\nSpeciateIT VALENCIA database",
    "crumbs": [
      "About the Kwon Lab",
      "16S",
      "16S Pipeline"
    ]
  },
  {
    "objectID": "materials/16S/16s_pipeline/index.html#installation",
    "href": "materials/16S/16s_pipeline/index.html#installation",
    "title": "16S Pipeline Tutorial",
    "section": "Installation",
    "text": "Installation\nTo install the workflow, run:\n# Clone the repository without history and enter the project directory\ngit clone --depth=1 https://github.com/kwondry/16s_dada2_valencia.git\n\ncd 16s_dada2_valencia\nThis will create a fresh copy of the workflow without any git history.",
    "crumbs": [
      "About the Kwon Lab",
      "16S",
      "16S Pipeline"
    ]
  },
  {
    "objectID": "materials/16S/16s_pipeline/index.html#configuration-and-set-up",
    "href": "materials/16S/16s_pipeline/index.html#configuration-and-set-up",
    "title": "16S Pipeline Tutorial",
    "section": "Configuration and set up",
    "text": "Configuration and set up\n\nDatabase Paths: Edit config/config.yaml to set the paths to your reference databases:\nhisat_db: \"/path/to/hisat2/human/reference\"  # Path to HISAT2 index of T2T human genome\ngtdb_tax_db: \"/path/to/GTDB/taxonomy/database\"  # DADA2 GTDB taxonomy database\ngtdb_species_db: \"/path/to/GTDB/species/database\"  # DADA2 GTDB species database \nspeciateit_db: \"/path/to/speciateit_valencia\"  # SpeciateIT VALENCIA database\nTo obtain these databases:\n\nHISAT2 human reference: Download the T2T human genome from NCBI and index it using HISAT2’s hisat2-build command\nGTDB databases: Download the DADA2-formatted GTDB reference files from Zenodo\nSpeciateIT database: Clone the speciateIT databases and VALENCIA scripts from the Ravel Lab GitHub\n\nDADA2 Parameters: The workflow includes default parameters for DADA2 processing. You can modify these in config/config.yaml:\ndada2:\n  pe:\n    maxEE: 3\n    truncLen: [286, 260]\n    trimLeft: [10, 10]\n    merge:\n      minOverlap: 8\n      maxMismatch: 1\n  se:\n    maxEE: 1\n    truncLen: 230\n    trimLeft: 10\nPrimer Sequences: Update the primer sequences in config/config.yaml if using different primers:\nprimers:\n  v3v4:\n    forward: \"ACTCCTRCGGGAGGCAGCAG\"\n    reverse: \"GGACTACHVGGGTWTCTAAT\"",
    "crumbs": [
      "About the Kwon Lab",
      "16S",
      "16S Pipeline"
    ]
  },
  {
    "objectID": "materials/16S/16s_pipeline/index.html#input-data",
    "href": "materials/16S/16s_pipeline/index.html#input-data",
    "title": "16S Pipeline Tutorial",
    "section": "Input Data",
    "text": "Input Data\nThis workflow can run process multiple sequencing runs in parralel.\n\nNote the folder path of demultiplexed .fastq files and mapping file for each run.\nCreate/edit a sequencing runsheet CSV file with the following columns:\n\nrun_id: Run identifier\nmapping_file: Path to mapping file containing sample IDs\nfastq_dir: Path to directory containing FASTQ files\nregion: Sequencing region used (V4 or V3V4)\n\nThe mapping file should contain unique sample identifiers in a column #SampleID that match the FASTQ filenames in the fastq_dir.\nThe workflow will automatically process both single-end and paired-end data based on the FASTQ files present.",
    "crumbs": [
      "About the Kwon Lab",
      "16S",
      "16S Pipeline"
    ]
  },
  {
    "objectID": "materials/16S/16s_pipeline/index.html#running-the-workflow",
    "href": "materials/16S/16s_pipeline/index.html#running-the-workflow",
    "title": "16S Pipeline Tutorial",
    "section": "Running the Workflow",
    "text": "Running the Workflow\n\nTest Run:\nsnakemake -n\nLocal Execution:\nsnakemake --use-conda --cores all\nSLURM Execution:\n sbatch submit_jobs.sh",
    "crumbs": [
      "About the Kwon Lab",
      "16S",
      "16S Pipeline"
    ]
  },
  {
    "objectID": "materials/16S/16s_pipeline/index.html#output",
    "href": "materials/16S/16s_pipeline/index.html#output",
    "title": "16S Pipeline Tutorial",
    "section": "Output",
    "text": "Output\nThe workflow generates two main outputs in the outputs/results directory:\n\nTwo versions of a phyloseq object containing ASV counts, taxonomy assignments, CST assignment, and sample metadata with either a vaginal-specific taxonomy db, speciateIT or GTDB.\nA MultiQC report summarizing read quality metrics and taxonomic composition",
    "crumbs": [
      "About the Kwon Lab",
      "16S",
      "16S Pipeline"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Kwon Lab Pipelines",
    "section": "",
    "text": "Kwon Lab Pipelines\nby Kwondry\n\n\nDocumentation and tutorials for reproducible research in the Kwon Lab"
  },
  {
    "objectID": "materials/16S/background/index.html",
    "href": "materials/16S/background/index.html",
    "title": "16S Background",
    "section": "",
    "text": "Coming soon",
    "crumbs": [
      "About the Kwon Lab",
      "16S",
      "Background"
    ]
  },
  {
    "objectID": "materials/getting-started/installation/index.html",
    "href": "materials/getting-started/installation/index.html",
    "title": "Installation instructions",
    "section": "",
    "text": "Instructions for installing various package managers and pipelines",
    "crumbs": [
      "About the Kwon Lab",
      "Getting Started",
      "</b> Installing software for work on O2"
    ]
  },
  {
    "objectID": "materials/getting-started/installation/index.html#compute-node",
    "href": "materials/getting-started/installation/index.html#compute-node",
    "title": "Installation instructions",
    "section": "Compute node",
    "text": "Compute node\nBy default upon logging into O2, each user is placed on a login node. Login nodes are NOT suitable for supporting intensive computational processes. Intensive analyses on the login mode will be automatically terminated by O2 and users may be flagged by the admin if this occurs consistently. Please be sure to request a compute node to execute any tasks. For additional details about compute nodes, please reference the O2 documentation.\n\nThis command requests a compute node for 12 hours, with 8GB of memory and 1 core. Compute nodes automatically terminate when you disconnect from the O2 cluster or when the time limit is met, whichever occurs first.\n\nsrun --pty -p priority -t 12:0:0 --mem=8G -c 1 bash",
    "crumbs": [
      "About the Kwon Lab",
      "Getting Started",
      "</b> Installing software for work on O2"
    ]
  },
  {
    "objectID": "materials/getting-started/installation/index.html#mambaminimamba",
    "href": "materials/getting-started/installation/index.html#mambaminimamba",
    "title": "Installation instructions",
    "section": "mamba/minimamba",
    "text": "mamba/minimamba\nExecuting bioinformatics analyses often involve installing multiple packages/tools. Mamba is a package manager that allows users to create environments. Environments separate these package installations into individual “partitions”, which helps 1) prevent users from disrupting their own base environment with the installations of these new packages, 2) facilitate easy access and removal of packages and 3) manage/create environments individually for each pipeline or type of analysis.\nInstall mamba on O2 terminal:\n\ncd ~;\ncurl -L -O \"https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-$(uname)-$(uname -m).sh\";\nbash Mambaforge-$(uname)-$(uname -m).sh;\n\nInitialize mamba on O2 terminal before usage (first time only):\n\nmamba init\n# close terminal and reopen\nsource ~/.bashrc",
    "crumbs": [
      "About the Kwon Lab",
      "Getting Started",
      "</b> Installing software for work on O2"
    ]
  },
  {
    "objectID": "materials/getting-started/installation/index.html#snakemake",
    "href": "materials/getting-started/installation/index.html#snakemake",
    "title": "Installation instructions",
    "section": "Snakemake",
    "text": "Snakemake\nSnakemake is a package that helps structure and streamline code writing for bioinformatics pipelines, which is particularly useful for complicated pipelines that involve multiple steps and a huge number of files. Create your first conda environment named snakemake_8_20_3 with the snakemake package installed with the following command.\nTo read more about snakemake, please refer to the official Snakemake documentation.\nInstall snakemake on O2 terminal:\n\nmamba create -n snakemake_8_20_3 -c conda-forge -c bioconda snakemake=8.20.3  snakemake-executor-plugin-slurm  snakemake-executor-plugin-slurm-jobstep\n\nTo use snakemake, activate this environment maintained by mamba:\n\nmamba activate snakemake_8_20_3",
    "crumbs": [
      "About the Kwon Lab",
      "Getting Started",
      "</b> Installing software for work on O2"
    ]
  },
  {
    "objectID": "materials/getting-started/installation/index.html#vscode",
    "href": "materials/getting-started/installation/index.html#vscode",
    "title": "Installation instructions",
    "section": "VSCode",
    "text": "VSCode\nVSCode is a code text editor application that provides an easy-to-use interface for viewing and writing code/scripts. This section will detail how to 1) install VSCode as an application on your computer, 2) install VSCode extensions and 3) setup launching VSCode as an interface to view and edit your files on the O2 cluster.\n\nInstall VSCode application\nTo install VSCode on your computer, use this link.\n\n\nInstall VSCode extensions\nVSCode has a number of extensions that allow each user to customize their own coding experience. We recommend the installation of three extensions:\n\nRainbow CSV - identifies “,” as the separator in CSV files, highlights each column with a different color\nVSCode-pdf - view PDF files directly within the VSCode interface\nRemote-SSH - allows users to login and access their own HPC cluster and view their files through the VSCode interface (see next section)\n\nTo install extensions:\n\nNavigate to the toolbar on the far left of the VSCode interface and click on the icon that resembles four squares.\nUse the search bar that has the caption “Search Extensions in Marketplace” to find extensions that you like and install each of them individually.\nAn additional step for Remote-SSH installation involves changing the connect timeout setting. As O2 login requires Duo authentication, there is often a slight delay and more time is needed to complete the authentication and login properly. To adjust this, please follow steps 4-6.\nNavigate to the extension page for Remote-SSH (on the toolbar on the far left, select the icon with four squares, then input remote-ssh into the search bar) \n\nSelect the gear button and press Settings \n\nInput 120 seconds for the Remote.SSH: Connect Timeout parameter \n\n\n\n\nSetup O2 access with VSCode: Launch VSCode on O2 login node\nWhile logging into O2 on the terminal only provides a command-line interface and linux commands are needed to modify files, the main advantage of accessing O2 through VSCode is it allows users to easily view and edit their files in an interactive manner within the VSCode application.\nAfter installation of VSCode and the Remote-SSH extension, establish a SSH connection to O2 through VSCode:\n\nPress the bottom left purple icon to ‘Open a Remote Window’. This will prompt a few options to be displayed at the top near the search bar \nSelect ‘Add New SSH Host’ and then input the following and enter\n\n\n&lt;hms_id&gt;@o2.hms.harvard.edu\n\n\nSelect &lt;path to config&gt;/.ssh/config as the SSH configuration file to update\nInput password for O2 login\nComplete Duo authentication\nLogin complete (Note: login may take longer at the first instance because VSCode will download its own server.)\n\nAfter setup, directly click the bottom left purple icon each time and input login credentials to launch O2 on VSCode each time.\n\n\nSetup O2 access with VSCode: Launch VSCode on O2 compute node\nAfter setting up VSCode, Remote-SSH extension and establishing a connection to O2 login node through VSCode, follow these steps to launch VSCode on a compute node in O2. This is useful if you plan to use VSCode to open or edit larger files as this may be a process that is too computationally intensive for login nodes to handle, leading the O2 cluster to automatically terminate your connection to O2 through VSCode. For a more detailed description, please refer to the official O2 documentation on VSCode, which was used as a reference for this section.\n\nGenerate SSH key on your own computer’s terminal with the following command. When prompted for file name, press enter to use the default file name. Enter a passphrase to protect your SSH keys.\n\n\n# input this line into your computer's terminal\nssh-keygen -t rsa\n\n# sample output (See O2 documentation for reference)\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/USERHOME/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /USERHOME/.ssh/id_rsa.\nYour public key has been saved in /USERHOME/.ssh/id_rsa.pub.\nThe key fingerprint is:\na5:b5:38:73:b7:3c:a6:8a:1d:a8:bd:87:4e:be:33:21 \n\n\nCopy your computer’s SSH public key onto the O2 SSH authorized_keys file, which allows your computer and O2 to recognize each other\n\n\nLinux or Mac:\n\n\n# input this line into your computer's terminal\nssh-copy-id -i $HOME/.ssh/id_rsa.pub &lt;hms_id&gt;@o2.hms.harvard.edu\n# input O2 password and complete Duo authentication\n\n\nWindows:\n\n\n# input this line into your computer's terminal\nGet-Content \"$env:USERPROFILE\\.ssh\\id_rsa.pub\" | ssh &lt;hms_id&gt;@o2.hms.harvard.edu \"mkdir -p ~/.ssh && cat &gt;&gt; ~/.ssh/authorized_keys\"\n# input O2 password and complete Duo authentication\n\n\nAdd new lines in your computer’s SSH config file. Replace HMS ID with your own ID. After modification, use Ctrl + X followed by enter to save the file.\n\n\n# input this line into your computer's terminal\n# open your computer's SSH config file\nnano ~/.ssh/config\n\n#for Windows systems use\nnotepad $env:USERPROFILE\\.ssh\\config\n\n# copy and paste the following lines into the config file\nHost o2jump\n  HostName o2.hms.harvard.edu\n  User &lt;hms_id&gt;\n  ForwardAgent yes\n  ForwardX11 yes\n  ForwardX11Trusted yes\n\nHost o2job\n  HostName compute_node_of_job\n  User &lt;hms_id&gt;\n  ProxyJump o2jump\n  ForwardAgent yes\n\n\nRequest a compute node on O2, update your local config file with the node information for VSCode with the following command. Please use the command appropriate for your operating system, as the syntax varies slightly. Your requested compute node will be allocated with a 1 hour runtime, 4GB memory and 1 core.\n\n\nLinux:\n\n\n# input this line into your computer's terminal\nssh &lt;hms_id&gt;@o2.hms.harvard.edu \"/n/groups/kwon/joseph/submit_o2.sh\" | tail -n 1 | xargs -I {} sed -i \"/^Host o2job$/,/^\\s*Host /{s/^\\(\\s*HostName\\s*\\).*$/\\1{}/}\" ~/.ssh/config\n\n\nMac:\n\n\n# input this line into your computer's terminal\nssh &lt;hms_id&gt;@o2.hms.harvard.edu \"/n/groups/kwon/joseph/submit_o2.sh\" | tail -n 1 | xargs -I {} | xargs -I NODE_HOSTNAME sed -i '' \"/^Host o2job$/,/^[[:space:]]*Host / s/^\\([[:space:]]*HostName[[:space:]]*\\).*/\\1NODE_HOSTNAME/\" ~/.ssh/config\n\n\nWindows:\n\n\n# input this line into your computer's terminal\n$nodeHostname = (ssh &lt;hms_id&gt;@o2.hms.harvard.edu \"/n/groups/kwon/joseph/submit_o2.sh\" | Select-Object -Last 1); (Get-Content \"$env:USERPROFILE\\.ssh\\config\") | ForEach-Object { if ($_ -match 'Host o2job') { $_; $foundJob = $true } elseif ($foundJob -and $_ -match '^\\s*HostName\\s+') { $foundJob = $false; $_ -replace '(?&lt;=HostName\\s*)\\S+', $nodeHostname } else { $_ } } | Set-Content \"$env:USERPROFILE\\.ssh\\config\"\n\n\nOpen VSCode, select the bottom left purple icon to launch the remote connection. Select ‘Connect to Host’ and o2job as the server. Proceed by inputting O2 login password and completing Duo authentication. Select ‘Continue’ to proceed.\n\nSetup for launching VSCode on a O2 compute node is now complete. After setup, it is only necessary to execute Steps 4-5 each time to launch this.\n\n\nNavigate to your O2 directory in VSCode\nFollowing launching VSCode on either an O2 login or a compute node, navigate to your own O2 directory:\n\nNavigate to the top bar in VSCode and press File &gt; Open Folder\nType in path (e.g. /n/groups/kwon/&lt;your name&gt;)\nBegin to edit and view files in directory",
    "crumbs": [
      "About the Kwon Lab",
      "Getting Started",
      "</b> Installing software for work on O2"
    ]
  },
  {
    "objectID": "materials/getting-started/o2/index.html",
    "href": "materials/getting-started/o2/index.html",
    "title": "O2",
    "section": "",
    "text": "Working with the HMS O2 cluster",
    "crumbs": [
      "About the Kwon Lab",
      "Getting Started",
      "</b> Get your O2 account"
    ]
  },
  {
    "objectID": "materials/getting-started/o2/index.html#introduction-to-o2",
    "href": "materials/getting-started/o2/index.html#introduction-to-o2",
    "title": "O2",
    "section": "Introduction to O2",
    "text": "Introduction to O2\nO2 is the high performance computing (HPC) cluster maintained by Harvard Medical School. O2 official documentation is located here:\n\nO2 Cluster Documentation\n\nO2 Status (Maintenance Updates and Outages)",
    "crumbs": [
      "About the Kwon Lab",
      "Getting Started",
      "</b> Get your O2 account"
    ]
  },
  {
    "objectID": "materials/getting-started/o2/index.html#setting-up-your-o2-account",
    "href": "materials/getting-started/o2/index.html#setting-up-your-o2-account",
    "title": "O2",
    "section": "Setting up your O2 account",
    "text": "Setting up your O2 account\n\nObtain your O2 account\nKwon Lab is an “off-quad” Harvard Medical School affiliated lab that uses O2 computing services. This section was created using the official O2 documentation as reference.\n\n\nSubmit PPMS form and wait for RC Core admin (rccore@hms.harvard.edu) for approval. Approval notifications are sent to email submitted in PPMS form.\nSign the HMS RC Core user agreement that is sent via email (requires PI to co-sign)\n\n\n\nAccessing O2\nUsing your computer’s terminal, use the following command to access O2 and enter your credentials accordingly.\n\nssh &lt;hms_id&gt;@o2.hms.harvard.edu\n\n\n\n\nSetting up 2-Factor Authentication with Duo\nO2 login requires 2-Factor Authentication and it is recommended to execute this through the Duo app, which can be installed on your phone.\n\nDownload the app on phone\nEmail itservicedesk@hms.harvard.edu or call 617-432-2000 to ask HMS IT to register and connect your HMS account with Duo.\nLogging into O2 by default asks you to pick a Duo authentication method (push, call or text). Set your Duo app to either send a push or call your phone each time automatically. DO NOT set text as your default.\n\n(On the login node) Run the following on O2 terminal:\nFor push: (recommended, but only if you already have Duo push!)\n\necho 'export DUO_PASSCODE=push' &gt;&gt; $HOME/.bashrc\n\nFor phone call:\n\necho 'export DUO_PASSCODE=phone' &gt;&gt; $HOME/.bashrc\n\n\n\nSetup passwordless login (SSH keys)\nPlease refer to SSH keys tutorial here",
    "crumbs": [
      "About the Kwon Lab",
      "Getting Started",
      "</b> Get your O2 account"
    ]
  },
  {
    "objectID": "materials/getting-started/o2/index.html#getting-oriented-with-o2",
    "href": "materials/getting-started/o2/index.html#getting-oriented-with-o2",
    "title": "O2",
    "section": "Getting oriented with O2",
    "text": "Getting oriented with O2\nSave all your files into one of the two locations:\n\n/n/groups/kwon/&lt;your_name&gt; Your own folder within the Kwon Lab group folder and main storage location.\n\n/n/groups/scratch/&lt;first_letter_of_hms_id&gt;/&lt;hms_id&gt; Scratch directory is for temporary storage and files are deleted in 45 days.\n\n\nRequest access to the /n/groups/kwon/ groups folder\nTo request access, email rchelp@hms.harvard.edu to ask for access to the group folder /n/groups/kwon on O2. Please copy dkwon@mgh.harvard.edu and jelsherbini@mgh.harvard.edu.\nUse the following command in the O2 terminal to access the Kwon Lab folder and make a folder under your own name:\n\ncd /n/groups/kwon/\nmkdir &lt;your name&gt;\n\nTo access your own folder within the Kwon Lab group folder on the O2 terminal:\n\ncd /n/groups/kwon/&lt;your name&gt;\n\n\n\nMaking a scratch directory\nNote: the scratch directory is for TEMPORARY STORAGE. All files in scratch are automatically deleted 45 days after their last modification date. Everything you want to keep needs to be moved to your folder in /n/groups/kwon/&lt;your name&gt;.\n(On the login node) Run the following on O2 terminal:\n\n/n/cluster/bin/scratch_create_directory.sh\n\nTo access scratch directory:\n\ncd /n/groups/scratch/users/&lt;first_letter_of_hms_id&gt;/&lt;hms_id&gt;",
    "crumbs": [
      "About the Kwon Lab",
      "Getting Started",
      "</b> Get your O2 account"
    ]
  },
  {
    "objectID": "materials/metagenomics/virgo2/index.html",
    "href": "materials/metagenomics/virgo2/index.html",
    "title": "VIRGO2 Mapping and Taxonomy Pipeline",
    "section": "",
    "text": "The VIRGO2 pipeline is used to map reads to VIRGO2 and annotate the reads with taxonomic and functional information. It processes paired-end sequencing data and generates comprehensive taxonomic and functional annotations using the VIRGO2 database.\n\n\n\n\n\n\nNote\n\n\n\nVIRGO2 is a resource developed by the Ravel lab at University of Maryland School of Medicine. The manuscript is available here: doi: 10.1101/2025.03.04.641479\n\n\nThis workflow assumes you have already quality filtered, adapter trimmed, and host filtered your reads.",
    "crumbs": [
      "About the Kwon Lab",
      "Metagenomics",
      "VIRGO2 Pipeline"
    ]
  },
  {
    "objectID": "materials/metagenomics/virgo2/index.html#overview",
    "href": "materials/metagenomics/virgo2/index.html#overview",
    "title": "VIRGO2 Mapping and Taxonomy Pipeline",
    "section": "",
    "text": "The VIRGO2 pipeline is used to map reads to VIRGO2 and annotate the reads with taxonomic and functional information. It processes paired-end sequencing data and generates comprehensive taxonomic and functional annotations using the VIRGO2 database.\n\n\n\n\n\n\nNote\n\n\n\nVIRGO2 is a resource developed by the Ravel lab at University of Maryland School of Medicine. The manuscript is available here: doi: 10.1101/2025.03.04.641479\n\n\nThis workflow assumes you have already quality filtered, adapter trimmed, and host filtered your reads.",
    "crumbs": [
      "About the Kwon Lab",
      "Metagenomics",
      "VIRGO2 Pipeline"
    ]
  },
  {
    "objectID": "materials/metagenomics/virgo2/index.html#pipeline-steps",
    "href": "materials/metagenomics/virgo2/index.html#pipeline-steps",
    "title": "VIRGO2 Mapping and Taxonomy Pipeline",
    "section": "Pipeline Steps",
    "text": "Pipeline Steps\nThe workflow performs the following steps:\n\nMaps sequencing reads to the VIRGO2 database\nGenerates taxonomic annotations\nCalculates relative abundances\nProduces summary reports and annotated output files",
    "crumbs": [
      "About the Kwon Lab",
      "Metagenomics",
      "VIRGO2 Pipeline"
    ]
  },
  {
    "objectID": "materials/metagenomics/virgo2/index.html#prerequisites",
    "href": "materials/metagenomics/virgo2/index.html#prerequisites",
    "title": "VIRGO2 Mapping and Taxonomy Pipeline",
    "section": "Prerequisites",
    "text": "Prerequisites\n\nconda\nSnakemake (version 8.20.0 or later)\n\nFor O2 setup instructions, visit here.",
    "crumbs": [
      "About the Kwon Lab",
      "Metagenomics",
      "VIRGO2 Pipeline"
    ]
  },
  {
    "objectID": "materials/metagenomics/virgo2/index.html#installation",
    "href": "materials/metagenomics/virgo2/index.html#installation",
    "title": "VIRGO2 Mapping and Taxonomy Pipeline",
    "section": "Installation",
    "text": "Installation\nTo install the workflow, run:\ncurl -L https://github.com/kwondry/virgo2_mapping_and_taxonomy/archive/refs/heads/main.zip -o main.zip\nunzip main.zip && rm main.zip",
    "crumbs": [
      "About the Kwon Lab",
      "Metagenomics",
      "VIRGO2 Pipeline"
    ]
  },
  {
    "objectID": "materials/metagenomics/virgo2/index.html#database-setup",
    "href": "materials/metagenomics/virgo2/index.html#database-setup",
    "title": "VIRGO2 Mapping and Taxonomy Pipeline",
    "section": "Database Setup",
    "text": "Database Setup\n\n\n\n\n\n\nImportant\n\n\n\nThe VIRGO2 database is currently available via Dropbox. After publication, the files will be available from the Ravel lab on Zenodo.\n\n\nTo set up the database:\n\nGet the Dropbox link from Michael France\nDownload and extract the database files to your preferred location\nUpdate the virgo2 section in config/config.yaml with the absolute path to your database location\n\nNote: The database location can be anywhere on your system - it does not need to be within this workflow directory.",
    "crumbs": [
      "About the Kwon Lab",
      "Metagenomics",
      "VIRGO2 Pipeline"
    ]
  },
  {
    "objectID": "materials/metagenomics/virgo2/index.html#running-the-pipeline",
    "href": "materials/metagenomics/virgo2/index.html#running-the-pipeline",
    "title": "VIRGO2 Mapping and Taxonomy Pipeline",
    "section": "Running the Pipeline",
    "text": "Running the Pipeline\n\nTest Data\nA test dataset is provided in resources/test_data/ containing three sample pairs. To run the workflow with test data:\n\nEnsure you’re in the workflow directory:\ncd virgo2_mapping_and_taxonomy\nRun the workflow with test data:\nsnakemake --use-conda --configfile config/config.yaml\n\n\n\nRunning with Your Own Data\nTo run the workflow with your own data:\n\nPrepare a samplesheet in CSV format with the following columns:\n\nsample: Sample identifier\nfastq_1: Path to first read file\nfastq_2: Path to second read file\n\nUpdate the configuration in config/config.yaml:\n\nSet the path to your samplesheet\nAdjust resource requirements as needed\n\nRun the workflow:\nsnakemake --use-conda --configfile config/config.yaml\n\n\n\nRunning on O2 Cluster\nTo submit the workflow to the O2 cluster, use the provided submission script:\nsbatch ./submit_jobs.sh\nThis is currently configured for the Kwon lab on the O2 cluster.",
    "crumbs": [
      "About the Kwon Lab",
      "Metagenomics",
      "VIRGO2 Pipeline"
    ]
  },
  {
    "objectID": "materials/metagenomics/virgo2/index.html#output-files",
    "href": "materials/metagenomics/virgo2/index.html#output-files",
    "title": "VIRGO2 Mapping and Taxonomy Pipeline",
    "section": "Output Files",
    "text": "Output Files\nThe workflow generates several output files:\n\n*.summary.NR.txt: Summary of mapping results at the gene level\n*_virgo2_NR_anno.csv: Results with the gene lengths and annotations added\n*_virgo2_metagenomic_taxa.csv: Taxonomic relative abundances calculated from the gene counts corrected for gene length",
    "crumbs": [
      "About the Kwon Lab",
      "Metagenomics",
      "VIRGO2 Pipeline"
    ]
  },
  {
    "objectID": "materials/r-tutorial/index.html",
    "href": "materials/r-tutorial/index.html",
    "title": "R workshop",
    "section": "",
    "text": "Learn how to use RStudio and the tidyverse for data exploration",
    "crumbs": [
      "About the Kwon Lab",
      "R and R Studio",
      "</b> R workshop"
    ]
  },
  {
    "objectID": "materials/r-tutorial/index.html#slides-intro-to-rstudio-quarto-and-r",
    "href": "materials/r-tutorial/index.html#slides-intro-to-rstudio-quarto-and-r",
    "title": "R workshop",
    "section": "Slides: Intro to RStudio, Quarto, and R",
    "text": "Slides: Intro to RStudio, Quarto, and R\nMake slides full screen",
    "crumbs": [
      "About the Kwon Lab",
      "R and R Studio",
      "</b> R workshop"
    ]
  },
  {
    "objectID": "materials/r-tutorial/index.html#download-the-data-for-the-workshop",
    "href": "materials/r-tutorial/index.html#download-the-data-for-the-workshop",
    "title": "R workshop",
    "section": "Download the data for the workshop",
    "text": "Download the data for the workshop\nThere are five files to download and place in your R project folder.\n\nmetadata.csv\n\nEach row of this table is a well on a plate that was measured. This has the bacterial isolate that was tested, the growth condition (long chain fatty acid) and the concentration of the long chain fatty acid.\nplate_id – an identifier of which plate was measured\nrow – row of the plate (A-H)\ncolumn – column of the plate (1-12)\nbug – the isolate/species that was tested in this well condition - which long chain fatty acid (LCFA) was added conc - what was the concentration of the LCFA in this well?\n\nplate_1_data.csv\nplate_2_data.csv\nplate_3_data.csv\nplate_4_data.csv\n\nplate_id – an identifier of which plate was measured\nrow – row of the plate (A-H)\ncolumn – column of the plate (1-12)\nod - the optical density that was measured in this well. This is a measure of bacterial growth.\n\nRead in data\nData is often in tables, and the easiest way to store tabular data is in csv or tsv format.\ncsv - comma separated values\ntsv - tab separated values\nto read in data stored this way use read_csv(filename) or read_tsv(filename)\nmetadata &lt;- read_csv(\"data/metadata.csv\")\n\n\nbinding tables together\nWe have data from 4 different plates in separate csv files. Use bind_rows to make a single table with all the data.\nplate_1 &lt;- read_csv(\"data/plate_1_data.csv\")\nplate_2 &lt;- read_csv(\"data/plate_2_data.csv\")\nplate_3 &lt;- read_csv(\"data/plate_3_data.csv\")\nplate_4 &lt;- read_csv(\"data/plate_4_data.csv\")\n\nall_plate_data &lt;- bind_rows(plate_1, plate_2, plate_3, plate_4)\n\n\njoining metadata to the data\nConnect the metadata to the plate reader data using left_join\n\njoined_data &lt;- all_plate_data %&gt;%\n  left_join(metadata)",
    "crumbs": [
      "About the Kwon Lab",
      "R and R Studio",
      "</b> R workshop"
    ]
  },
  {
    "objectID": "materials/r-tutorial/index.html#data-visualization-activity",
    "href": "materials/r-tutorial/index.html#data-visualization-activity",
    "title": "R workshop",
    "section": "Data visualization activity",
    "text": "Data visualization activity\nOn excalidraw.com or pen and paper, create a visualization to answer the questions below. Check out the data visualization cheatsheet for inspiration. Think about values you’d have to compute, or if you have everything you need already in our joined_data table.\n\nOption 1: What is the spread of values you typically see in the no media controls for different concentrations of LCFA? Bonus: are there any effects of where the well is on the plate with the values measured?\nOption 2: What is the typical growth in the media of the different bugs without any LCFA?\nOption 3: How do the different LCFAs tested impact the growth of L. crispatus?\nOption 4: Are there any batch effects between plates? (What conditions are measured on multiple plates, and what conditions are only on one plate?)",
    "crumbs": [
      "About the Kwon Lab",
      "R and R Studio",
      "</b> R workshop"
    ]
  },
  {
    "objectID": "materials/r-tutorial/index.html#example-answers-for-data-analysis-questions",
    "href": "materials/r-tutorial/index.html#example-answers-for-data-analysis-questions",
    "title": "R workshop",
    "section": "Example answers for data analysis questions:",
    "text": "Example answers for data analysis questions:\n\n\n\n\n\n\nCalculate media backgrounds and bacterial growth with no LCFA\n\n\n\n\n\nmedia_background &lt;- joined_data %&gt;%\n  filter(bug == \"CTRL\") \n\nmedia_background_medians &lt;- media_background %&gt;%\n  group_by(plate_id, condition, conc) %&gt;%\n  summarise(no_bacteria_control = median(od))\n\nbug_no_lcfa_control &lt;- joined_data %&gt;%\n  filter(condition == \"CTRL\") %&gt;%\n  filter(bug != \"CTRL\") %&gt;%\n  left_join(media_background_averages) %&gt;%\n  mutate(background_subtracted_od = od - no_bacteria_control)\n  \nbug_no_lcfa_control_medians &lt;- bug_no_lcfa_control %&gt;%\n  group_by(plate_id, bug) %&gt;%\n  summarise(no_lcfa_control = median(background_subtracted_od)) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\n\n\nCalculate relative growths for each bug in each concentration of LCFA\n\n\n\n\n\nrelative_growths &lt;- joined_data %&gt;%\n  filter(condition != \"CTRL\", bug !=\"CTRL\") %&gt;%\n  left_join(media_background_medians) %&gt;%\n  mutate(background_subtracted_od = od - no_bacteria_control) %&gt;%\n  left_join(bug_no_lcfa_control_medians) %&gt;%\n  mutate(relative_growth = background_subtracted_od/ no_lcfa_control) \n\n\n\n\n\n\n\n\n\nExample plots\n\n\n\n\n\n\nmedia_background %&gt;% \n  ggplot(aes(x=od)) +\n  geom_histogram(binwidth = 0.01) +\n  facet_wrap(~condition+conc)\n\n\n\n\n\n\n\n\n\nbug_no_lcfa_control %&gt;%\n  ggplot(aes(x=background_subtracted_od)) +\n  geom_histogram(binwidth = 0.05) +\n  facet_wrap(~bug)\n\n\n\n\n\n\n\n\n\nrelative_growths %&gt;%\n  mutate(conc = as.factor(conc)) %&gt;%\n  ggplot(aes(x=conc, y=relative_growth)) +\n  geom_boxplot(outlier.shape = NA) +\n  ggbeeswarm::geom_quasirandom() +\n  scale_y_continuous(trans=scales::log2_trans()) +\n  facet_wrap(~condition+bug, ncol=6)",
    "crumbs": [
      "About the Kwon Lab",
      "R and R Studio",
      "</b> R workshop"
    ]
  },
  {
    "objectID": "materials/rnaseq/background/index.html",
    "href": "materials/rnaseq/background/index.html",
    "title": "Background",
    "section": "",
    "text": "Work in progress",
    "crumbs": [
      "About the Kwon Lab",
      "RNAseq",
      "Background"
    ]
  },
  {
    "objectID": "materials/rnaseq/background/index.html#beyond-the-pipeline",
    "href": "materials/rnaseq/background/index.html#beyond-the-pipeline",
    "title": "Background",
    "section": "Beyond the pipeline",
    "text": "Beyond the pipeline\nTypically you’ll want to explore your RNAseq dataset for more quality checks and sanity checks, and look for differences in gene expression with different treatments.\nThe following code is an example of how to get your data into deseq2. (Make sure you have the recommended packages installed by following the R installation instructions).\n\nlibrary(DESeq2)\nlibrary(tidyverse)\nlibrary(microViz)\n\ncounts &lt;- read_tsv(\"salmon.merged.gene_counts_length_scaled.tsv\")\n\ncounts_for_deseq &lt;- counts %&gt;% select(-gene_name) %&gt;%\n  as.data.frame() %&gt;%\n  column_to_rownames(\"gene_id\") %&gt;%\n  as.matrix()\n\ngene_names_for_deseq &lt;- counts %&gt;% select(gene_id, gene_name) %&gt;%\n  as.data.frame() %&gt;%\n  column_to_rownames(\"gene_id\")\n\nsample_metadata_for_deseq &lt;- tibble(sample_id =  counts %&gt;% select(-gene_id, -gene_name) %&gt;% colnames()) %&gt;% left_join (read_csv(\"SKH_Expt_P10_metadata.csv\")) %&gt;%\n  as.data.frame() %&gt;%\n  column_to_rownames(\"sample_id\")\n\ndeseq_dataset &lt;- DESeqDataSetFromMatrix(countData=round(counts_for_deseq), colData=sample_metadata_for_deseq, rowData=gene_names_for_deseq, design=~treatment_code)\n\nThen, read through and follow along with the DEseq2 vignette, starting with the “Pre-filtering” section.\nAs an example, here is a code chunk that combines the pre-filtering example and the PCA code from the vignette.\n\nsmallestGroupSize &lt;- 3\nkeep &lt;- rowSums(counts(deseq_dataset) &gt;= 10) &gt;= smallestGroupSize\ndds &lt;- deseq_dataset[keep,]\n\nvsd &lt;- vst(dds, blind=FALSE)\npcaData &lt;- plotPCA(vsd, intgroup=c(\"polyamine\", \"inhibitor\"), returnData=TRUE)\npercentVar &lt;- round(100 * attr(pcaData, \"percentVar\"))\nggplot(pcaData, aes(PC1, PC2, color=polyamine, shape=inhibitor)) +\n  geom_point(size=3) +\n  xlab(paste0(\"PC1: \",percentVar[1],\"% variance\")) +\n  ylab(paste0(\"PC2: \",percentVar[2],\"% variance\")) + \n  coord_fixed()\n\n\nmicroViz hack, largely untested.\nThis following code is a hack to get your already normalized data into a phyloseq object, which is typically only used for 16S analysis. However, there are very nice ordination functions and heatmap functions available for phyloseq objects in the microViz package, so it might be worth the hackiness.\n\nlibrary(microViz)\ngene_abundance &lt;- read_tsv(\"salmon.merged.gene_tpm.tsv\")\n\ngene_count_table &lt;- gene_abundance %&gt;%\n  select(-gene_name) %&gt;%\n  as.data.frame() %&gt;%\n  column_to_rownames(\"gene_id\") %&gt;%\n  as.matrix() %&gt;%\n  phyloseq::otu_table(taxa_are_rows = TRUE)\n\ngene_annotations &lt;- gene_abundance %&gt;% select(gene_id, gene_name) %&gt;%\n  as.data.frame() %&gt;%\n  column_to_rownames(\"gene_id\") %&gt;%\n  as.matrix() %&gt;%\n  phyloseq::tax_table()\n\nsample_metadata &lt;- tibble(sample_id =  counts %&gt;% select(-gene_id, -gene_name) %&gt;% colnames()) %&gt;% left_join (read_csv(\"SKH_Expt_P10_metadata.csv\")) %&gt;%\n  as.data.frame() %&gt;%\n  column_to_rownames(\"sample_id\")\n  phyloseq::sam_data()\n\nrnaseq_dataset &lt;- phyloseq::phyloseq(gene_count_table, gene_annotations, sample_metadata) %&gt;% tax_fix()",
    "crumbs": [
      "About the Kwon Lab",
      "RNAseq",
      "Background"
    ]
  }
]